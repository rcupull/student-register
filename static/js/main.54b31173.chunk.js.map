{"version":3,"sources":["components/stylesComponent.tsx","utils/definitions.tsx","presentational/navBar.tsx","presentational/home.tsx","reducers/actions.tsx","presentational/formStudent.tsx","presentational/formGroup.tsx","presentational/insert.tsx","utils/utilsFunctions.tsx","reducers/dataTypes.tsx","presentational/filter.tsx","presentational/listStudents.tsx","presentational/listGroups.tsx","presentational/register.tsx","components/routeConnected.tsx","AppConnected.tsx","App.tsx","reducers/rootReducer.tsx","serviceWorker.ts","index.tsx"],"names":["desactiveColor","navBarLinkStyle","padding","fontSize","display","color","borderRadius","navBarLinkDesactiveStyle","backgroundColor","navBarLinkActiveStyle","navBarLinkItemStyle","navBarBodyStyle","borderColor","navBar2LinkStyle","navBar2LinkDesactiveStyle","navBar2LinkActiveStyle","navBar2BodyStyle","formSubmitButtonStyle","formBodyStyle","border","width","formStudentBodyStyle","formGroupBodyStyle","filterBodyStyle","filterButtonStyle","applyFilterButtonContainerStyle","textAlign","resetFilterButtonContainerStyle","listTableBodyStyle","listDeleteButtonStyle","homeCardBodyStyle","margin","GetURL","item","hostName","NavBar","handleInsertLink","path","text","to","style","styles","activeStyle","isActive","match","location","_","split","pathname","handleIsActive","Nav","variant","activeKey","Item","ReactRedux","state","ownProps","isOnline","Card","Body","Title","Text","Link","href","FetchingAction","type","FetchErrorAction","ChangeIsOnlineAction","value","FetchThunk","dispatch","getState","isUpdated","axios","method","url","then","res","data","FetchSuccessAction","catch","PostThunk","PostSuccessAction","DeleteThunk","id","DeleteSuccessAction","Actions","FetchStudents","FetchProfessors","FetchGroups","FetchCities","PostStudents","student","PostGroup","group","DeleteStudent","DeleteGroup","ChangeVsFilterAction","vsFilter","CheckIsOnlineThunk","MapDispatchToProps","handlePostStudent","handleLoadGroups","listCities","cities","listGroups","groups","fetching","students","isFetching","useState","name","setName","age","setAge","email","setEmail","groupId","setGroupId","sex","setSex","cityId","setCityId","birthday","setBirthday","handleResetGroupId","length","handleResetCityId","useEffect","Form","onSubmit","event","preventDefault","Number","Group","Label","Control","pattern","required","placeholder","onChange","e","target","as","map","key","min","max","city","Button","handlePostGroup","listProfessors","professors","professorId","setProfessorId","handlesResetAll","prof","Insert","insertFormRoute","IdToName","list","index","findIndex","obj","filterTypeArray","defaultFilterVs","option","defaultFetchingState","errorFetch","defaultRootReducerState","handleChangeFilterVs","listProfessor","currentFilterVs","filter","setFilter","filterOption","setFilterOption","filterOptionArray","setFilterOptionArray","Row","Col","sm","FormControl","handleChangeFilter","Container","onClick","fields","handleDeleteStudent","handleLoadGroup","handleLoadStudents","listStudents","find","undefined","Table","striped","bordered","hover","field","professor","StudentToProfessorName","handleLoadProfessor","handleDeleteGroup","Register","handleRegisterLink","registerListRoute","Component","component","loadCities","loadProffesors","checkIsOnline","error","setInterval","exact","Home","store","createStore","action","tmpState","applyMiddleware","thunk","App","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.54b31173.chunk.js","sourcesContent":["/////////////////////////////NavBar////////////////////////////////////\r\nimport CSS from \"csstype\";\r\n\r\nconst desactiveColor: string = \"rgb(116, 128, 175)\";\r\nconst activeColor: string = \"rgb(91, 187, 130)\";\r\n///////////////////////////////////////////NAVBAR////////////////////////\r\nconst navBarLinkStyle: CSS.Properties = {\r\n  padding: \".5rem 1rem\",\r\n  fontSize: \"1.2rem\",\r\n  display: \"block\",\r\n  color: \"white\",\r\n  borderRadius: \"10px\"\r\n};\r\n\r\nexport const navBarLinkDesactiveStyle: CSS.Properties = {\r\n  ...navBarLinkStyle,\r\n  backgroundColor: desactiveColor\r\n};\r\n\r\nexport const navBarLinkActiveStyle: CSS.Properties = {\r\n  ...navBarLinkStyle,\r\n  backgroundColor: activeColor\r\n};\r\nexport const navBarLinkItemStyle: CSS.Properties = {\r\n  padding: \".5rem 1rem\"\r\n};\r\n\r\nexport const navBarBodyStyle: CSS.Properties = {\r\n  borderColor: \"gray\",\r\n  padding: \"0.5rem\"\r\n};\r\n\r\n////////////////////////////////////////////////////////\r\nconst navBar2LinkStyle: CSS.Properties = {\r\n  padding: \".5rem 1rem\",\r\n  fontSize: \"1.5rem\",\r\n  display: \"block\"\r\n};\r\n\r\nexport const navBar2LinkDesactiveStyle: CSS.Properties = {\r\n  ...navBar2LinkStyle,\r\n  color: desactiveColor\r\n};\r\n\r\nexport const navBar2LinkActiveStyle: CSS.Properties = {\r\n  ...navBar2LinkStyle,\r\n  color: activeColor\r\n};\r\n\r\nexport const navBar2BodyStyle: CSS.Properties = {\r\n  borderColor: \"gray\",\r\n  padding: \"0.5rem\"\r\n};\r\n////////////////////////////FORM////////////////////////\r\nexport const formSubmitButtonStyle: CSS.Properties = {\r\n  backgroundColor: desactiveColor,\r\n  borderColor: desactiveColor\r\n};\r\n\r\nexport const formBodyStyle: CSS.Properties = {\r\n  border: \"solid 0.01rem\",\r\n  padding: \"1rem\",\r\n  width: \"50%\",\r\n  borderColor: \"gray\"\r\n};\r\nexport const formStudentBodyStyle: CSS.Properties = {\r\n  ...formBodyStyle\r\n};\r\nexport const formGroupBodyStyle: CSS.Properties = {\r\n  ...formBodyStyle\r\n};\r\n\r\n////////////////////////////Filter////////////////////////\r\nexport const filterBodyStyle: CSS.Properties = {\r\n  padding: \"1rem\"\r\n};\r\n\r\nexport const filterButtonStyle: CSS.Properties = {\r\n  backgroundColor: desactiveColor,\r\n  borderColor: desactiveColor\r\n};\r\n\r\nexport const applyFilterButtonContainerStyle: CSS.Properties = {\r\n  textAlign: \"left\"\r\n};\r\nexport const resetFilterButtonContainerStyle: CSS.Properties = {\r\n  textAlign: \"right\"\r\n};\r\n/////////////////////////////LIST///////////////////////\r\n\r\nexport const listTableBodyStyle: CSS.Properties = {\r\n  border: \"solid 0.12rem gray\"\r\n};\r\n\r\nexport const listDeleteButtonStyle: CSS.Properties = {\r\n  backgroundColor: desactiveColor,\r\n  borderColor: desactiveColor\r\n};\r\n////////////////////////////Home////////////////////////\r\n\r\nexport const homeCardBodyStyle: CSS.Properties = {\r\n  margin: \"1.5rem 0\",\r\n  border: \"solid 0.05rem gray\"\r\n};\r\n","import { Item } from \"../reducers/dataTypes\";\r\n////////////////////////////////API/////////////////////////////\r\nconst hostName = \"http://localhost\";\r\nconst port = \":3001\";\r\nconst pathStudents = \"/students\";\r\nconst pathProfessors = \"/professors\";\r\nconst pathGroups = \"/groups\";\r\nconst pathCities = \"/cities\";\r\nconst pathIsOnline = \"/isOnlineFlag\";\r\n\r\nconst studentsURL = hostName + port + pathStudents;\r\nconst groupURL = hostName + port + pathGroups;\r\nconst professorURL = hostName + port + pathProfessors;\r\nconst citiesURL = hostName + port + pathCities;\r\nexport const isOnlineURL = hostName + port + pathIsOnline;\r\n\r\nexport const GetURL = (item: Item): string => {\r\n  switch (item) {\r\n    case \"students\":\r\n      return studentsURL;\r\n    case \"professors\":\r\n      return professorURL;\r\n    case \"groups\":\r\n      return groupURL;\r\n    case \"cities\":\r\n      return citiesURL;\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n\r\n//////////////////////////////////////ROUTES//////////////////////////\r\nexport const homeRoute = \"/\";\r\n\r\nexport const registerListRoute = \"/register\";\r\nexport const studentListRoute = \"/student-list\";\r\nexport const groupListRoute = \"/group-list\";\r\n\r\nexport const insertFormRoute = \"/insert\";\r\nexport const studentFormRoute = \"/student-form\";\r\nexport const groupFormRoute = \"/group-form\";\r\n","import React from \"react\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport * as styles from \"../components/stylesComponent\";\r\nimport {\r\n  homeRoute,\r\n  insertFormRoute,\r\n  registerListRoute\r\n} from \"../utils/definitions\";\r\n\r\nimport _ from \"lodash\";\r\nexport interface NavBarProps {}\r\n\r\nconst NavBar: React.SFC<NavBarProps> = () => {\r\n  const handleIsActive = (location: any, path: string): boolean => {\r\n    let pathname: string = \"/\" + _.split(location.pathname, \"/\")[1];\r\n    return pathname === path ? true : false;\r\n  };\r\n\r\n  const handleInsertLink = (path: string, text: string) => {\r\n    return (\r\n      <NavLink\r\n        to={path}\r\n        style={styles.navBarLinkDesactiveStyle}\r\n        activeStyle={styles.navBarLinkActiveStyle}\r\n        isActive={(match, location) => handleIsActive(location, path)}\r\n      >\r\n        {text}\r\n      </NavLink>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Nav variant=\"tabs\" activeKey=\"1\" style={styles.navBarBodyStyle}>\r\n      <Nav.Item style={styles.navBarLinkItemStyle}>\r\n        {handleInsertLink(homeRoute, \"Home\")}\r\n      </Nav.Item>\r\n\r\n      <Nav.Item style={styles.navBarLinkItemStyle}>\r\n        {handleInsertLink(insertFormRoute, \"Insert\")}\r\n      </Nav.Item>\r\n\r\n      <Nav.Item style={styles.navBarLinkItemStyle}>\r\n        {handleInsertLink(registerListRoute, \"Register\")}\r\n      </Nav.Item>\r\n    </Nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import * as React from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport * as styles from \"../components/stylesComponent\";\r\nimport { RootReducerState } from \"../reducers/dataTypes\";\r\nimport * as ReactRedux from \"react-redux\";\r\nexport interface OwnProps {}\r\nexport interface StateProps {\r\n  isOnline: boolean;\r\n}\r\nexport interface DispatchProps {}\r\ntype HomeProps = OwnProps & StateProps & DispatchProps;\r\n\r\nconst Home: React.SFC<HomeProps> = ({ isOnline }) => {\r\n  return (\r\n    <Card style={styles.homeCardBodyStyle}>\r\n      <Card.Body>\r\n        <Card.Title>\r\n          Application for the administration of students{\" \"}\r\n          {!isOnline ? \"<<CONNECTION FAIL>>\" : \"\"}\r\n        </Card.Title>\r\n        <Card.Text>\r\n          Download 'db.json' file from source code. Install json-server (\r\n          <Card.Link href=\"https://www.npmjs.com/package/json-server\">\r\n            https://www.npmjs.com/package/json-server\r\n          </Card.Link>\r\n          ) and write 'json-server --watch db.json --port 3001' for running\r\n          json-server.\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst MapStateToProps: ReactRedux.MapStateToProps<\r\n  StateProps,\r\n  OwnProps,\r\n  RootReducerState\r\n> = (state, ownProps) => {\r\n  return {\r\n    isOnline: state.isOnline\r\n  };\r\n};\r\n\r\nconst MapDispatchToProps: ReactRedux.MapDispatchToProps<\r\n  DispatchProps,\r\n  OwnProps\r\n> = {};\r\n\r\nexport default ReactRedux.connect(MapStateToProps, MapDispatchToProps)(Home);\r\n","import { ThunkAction } from \"redux-thunk\";\r\nimport axios from \"axios\";\r\nimport { GetURL, isOnlineURL } from \"../utils/definitions\";\r\nimport { Item, FilterVs, RootReducerState, Student, Group } from \"./dataTypes\";\r\n\r\nexport type OwnAction =\r\n  | { type: \"FETCHING\"; item: Item }\r\n  | { type: \"ERROR_FETCH\"; item: Item }\r\n  | { type: \"SUCCESS_FETCH\"; item: Item; data: any[] }\r\n  | { type: \"SUCCESS_POST\"; item: Item }\r\n  | { type: \"SUCCESS_DELETE\"; item: Item; id: number }\r\n  | { type: \"CHANGE_FILTER\"; vsFilter: FilterVs }\r\n  | { type: \"IS_ONLINE\"; value: boolean };\r\n\r\ntype ThunkResult<R> = ThunkAction<R, RootReducerState, undefined, OwnAction>;\r\n///////////////////////////////////Action Creators///////////////////\r\n\r\nconst FetchingAction = (item: Item): OwnAction => {\r\n  return { type: \"FETCHING\", item: item };\r\n};\r\nconst FetchErrorAction = (item: Item): OwnAction => {\r\n  return { type: \"ERROR_FETCH\", item: item };\r\n};\r\nconst FetchSuccessAction = (item: Item, data: any[]): OwnAction => {\r\n  return {\r\n    type: \"SUCCESS_FETCH\",\r\n    item: item,\r\n    data: data\r\n  };\r\n};\r\nconst PostSuccessAction = (item: Item): OwnAction => {\r\n  return {\r\n    type: \"SUCCESS_POST\",\r\n    item: item\r\n  };\r\n};\r\nconst DeleteSuccessAction = (item: Item, id: number): OwnAction => {\r\n  return {\r\n    type: \"SUCCESS_DELETE\",\r\n    item: item,\r\n    id: id\r\n  };\r\n};\r\n// //////////////////////////////////////////////////////////\r\nconst ChangeVsFilterAction = (vsFilter: FilterVs): OwnAction => {\r\n  return { type: \"CHANGE_FILTER\", vsFilter: vsFilter };\r\n};\r\nconst ChangeIsOnlineAction = (value: boolean): OwnAction => {\r\n  return { type: \"IS_ONLINE\", value: value };\r\n};\r\n//////////////////////////////////////////////////////////\r\nconst FetchThunk = (item: Item): ThunkResult<void> => (dispatch, getState) => {\r\n  if (!getState()[item].isUpdated) {\r\n    dispatch(FetchingAction(item));\r\n    const error = () => {\r\n      dispatch(FetchErrorAction(item));\r\n    };\r\n    const success = (res: any) => {\r\n      dispatch(FetchSuccessAction(item, res.data));\r\n    };\r\n\r\n    axios({ method: \"get\", url: GetURL(item) })\r\n      .then(success)\r\n      .catch(error);\r\n  }\r\n};\r\nconst CheckIsOnlineThunk = (): ThunkResult<void> => dispatch => {\r\n  const error = () => {\r\n    dispatch(ChangeIsOnlineAction(false));\r\n  };\r\n  const success = () => {\r\n    dispatch(ChangeIsOnlineAction(true));\r\n  };\r\n\r\n  axios({ method: \"get\", url: isOnlineURL })\r\n    .then(success)\r\n    .catch(error);\r\n};\r\n\r\nconst FetchCities = (): ThunkResult<void> => dispatch => {\r\n  dispatch(FetchThunk(\"cities\"));\r\n};\r\nconst FetchStudents = (): ThunkResult<void> => dispatch => {\r\n  dispatch(FetchThunk(\"students\"));\r\n};\r\nconst FetchProfessors = (): ThunkResult<void> => dispatch => {\r\n  dispatch(FetchThunk(\"professors\"));\r\n};\r\nconst FetchGroups = (): ThunkResult<void> => dispatch => {\r\n  dispatch(FetchThunk(\"groups\"));\r\n};\r\n///////////////////////////////////////////////////////////////////\r\nconst PostThunk = (\r\n  item: Item,\r\n  data: Student | Group\r\n): ThunkResult<void> => dispatch => {\r\n  dispatch(FetchingAction(item));\r\n  const error = () => {\r\n    dispatch(FetchErrorAction(item));\r\n  };\r\n  const success = (res: any) => {\r\n    dispatch(PostSuccessAction(item));\r\n  };\r\n  axios({ method: \"post\", url: GetURL(item), data: data })\r\n    .then(success)\r\n    .catch(error);\r\n};\r\nconst PostStudents = (student: Student): ThunkResult<void> => dispatch => {\r\n  dispatch(PostThunk(\"students\", student));\r\n};\r\nconst PostGroup = (group: Group): ThunkResult<void> => dispatch => {\r\n  dispatch(PostThunk(\"groups\", group));\r\n};\r\n\r\n///////////////////////////////////////////////////////\r\nconst DeleteThunk = (\r\n  item: Item,\r\n  data: Student | Group\r\n): ThunkResult<void> => dispatch => {\r\n  dispatch(FetchingAction(item));\r\n  const error = () => {\r\n    dispatch(FetchErrorAction(item));\r\n  };\r\n  const success = (res: any) => {\r\n    dispatch(DeleteSuccessAction(item, data.id));\r\n  };\r\n\r\n  axios({ method: \"delete\", url: GetURL(item) + \"/\" + data.id })\r\n    .then(success)\r\n    .catch(error);\r\n};\r\n\r\nconst DeleteStudent = (student: Student): ThunkResult<void> => dispatch => {\r\n  dispatch(DeleteThunk(\"students\", student));\r\n};\r\nconst DeleteGroup = (group: Group): ThunkResult<void> => dispatch => {\r\n  dispatch(DeleteThunk(\"groups\", group));\r\n};\r\n///////////////////////////////////////////////////////\r\nexport const Actions = {\r\n  FetchStudents,\r\n  FetchProfessors,\r\n  FetchGroups,\r\n  FetchCities,\r\n  PostStudents,\r\n  PostGroup,\r\n  DeleteStudent,\r\n  DeleteGroup,\r\n  ChangeVsFilterAction,\r\n  CheckIsOnlineThunk\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { SexTypes } from \"../reducers/dataTypes\";\r\nimport { City, Group, Student } from \"../reducers/dataTypes\";\r\nimport * as styles from \"../components/stylesComponent\";\r\nimport * as ReactRedux from \"react-redux\";\r\nimport { RootReducerState } from \"../reducers/dataTypes\";\r\nimport { Actions } from \"../reducers/actions\";\r\nexport interface OwnProps {}\r\nexport interface StateProps {\r\n  listGroups: Group[];\r\n  listCities: City[];\r\n  fetching: boolean;\r\n}\r\nexport interface DispatchProps {\r\n  handlePostStudent: (student: Student) => void;\r\n  handleLoadGroups: () => void;\r\n}\r\n\r\ntype FormStudentProps = OwnProps & StateProps & DispatchProps;\r\n\r\nconst FormStudent: React.SFC<FormStudentProps> = ({\r\n  listGroups,\r\n  listCities,\r\n  fetching,\r\n  handlePostStudent,\r\n  handleLoadGroups\r\n}) => {\r\n  const [name, setName] = useState<string>(\"\");\r\n  const [age, setAge] = useState<string>(\"\");\r\n  const [email, setEmail] = useState<string>(\"\");\r\n  const [groupId, setGroupId] = useState<number>(0);\r\n  const [sex, setSex] = useState<SexTypes>(\"Male\");\r\n  const [cityId, setCityId] = useState<number>(0);\r\n  const [birthday, setBirthday] = useState<string>(\"\");\r\n\r\n  const handleResetGroupId = () => {\r\n    if (listGroups.length) setGroupId(listGroups[0].id);\r\n  };\r\n  const handleResetCityId = () => {\r\n    if (listCities.length) setGroupId(listCities[0].id);\r\n  };\r\n  useEffect(() => {\r\n    handleResetCityId();\r\n    handleLoadGroups();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    handleResetGroupId();\r\n  }, [listGroups]);\r\n\r\n  const handlesResetAll = () => {\r\n    setName(\"\");\r\n    setAge(\"\");\r\n    setEmail(\"\");\r\n    handleResetGroupId();\r\n    setSex(\"Male\");\r\n    handleResetCityId();\r\n    setBirthday(\"\");\r\n  };\r\n\r\n  const handleSubmit = (event: any) => {\r\n    event.preventDefault();\r\n\r\n    handlePostStudent({\r\n      name: name,\r\n      age: Number(age),\r\n      sex: sex,\r\n      birthday: birthday,\r\n      cityId: cityId,\r\n      email: email,\r\n      groupId: groupId,\r\n      id: 0\r\n    });\r\n\r\n    handlesResetAll();\r\n  };\r\n\r\n  const handleGroupSelector = () => {\r\n    return (\r\n      <Form.Group>\r\n        <Form.Label>Group</Form.Label>\r\n        <Form.Control\r\n          as=\"select\"\r\n          value={groupId}\r\n          onChange={(e: any) => {\r\n            setGroupId(Number(e.target.value));\r\n          }}\r\n        >\r\n          {listGroups.map(group => (\r\n            <option key={group.id} value={group.id}>\r\n              {group.name}\r\n            </option>\r\n          ))}\r\n        </Form.Control>\r\n      </Form.Group>\r\n    );\r\n  };\r\n\r\n  const handleCitySelector = () => {\r\n    return (\r\n      <Form.Group>\r\n        <Form.Label>City</Form.Label>\r\n        <Form.Control\r\n          as=\"select\"\r\n          value={cityId}\r\n          onChange={(e: any) => {\r\n            setCityId(Number(e.target.value));\r\n          }}\r\n        >\r\n          {listCities.map(city => (\r\n            <option key={city.id} value={city.id}>\r\n              {city.name}\r\n            </option>\r\n          ))}\r\n        </Form.Control>\r\n      </Form.Group>\r\n    );\r\n  };\r\n\r\n  const handleSexSelector = () => {\r\n    return (\r\n      <Form.Group>\r\n        <Form.Label>Sex</Form.Label>\r\n        <Form.Control\r\n          as=\"select\"\r\n          onChange={(e: any) => {\r\n            setSex(e.target.value);\r\n          }}\r\n        >\r\n          <option>Male</option>\r\n          <option>Female</option>\r\n        </Form.Control>\r\n      </Form.Group>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit} style={styles.formStudentBodyStyle}>\r\n      <Form.Group>\r\n        <Form.Label>Name</Form.Label>\r\n        <Form.Control\r\n          pattern=\"[a-z A-Z]*\"\r\n          value={name}\r\n          required\r\n          type=\"text\"\r\n          placeholder=\"Enter full name\"\r\n          onChange={(e: any) => {\r\n            setName(e.target.value);\r\n          }}\r\n        />\r\n      </Form.Group>\r\n      {handleGroupSelector()}\r\n      <Form.Group>\r\n        <Form.Label>Email</Form.Label>\r\n        <Form.Control\r\n          required\r\n          type=\"email\"\r\n          value={email}\r\n          placeholder=\"Enter email\"\r\n          onChange={(e: any) => {\r\n            setEmail(e.target.value);\r\n          }}\r\n        />\r\n      </Form.Group>\r\n\r\n      {handleSexSelector()}\r\n      <Form.Group>\r\n        <Form.Label>Age</Form.Label>\r\n        <Form.Control\r\n          required\r\n          type=\"number\"\r\n          min=\"5\"\r\n          max=\"100\"\r\n          placeholder=\"Enter age\"\r\n          value={age}\r\n          onChange={(e: any) => {\r\n            setAge(e.target.value);\r\n          }}\r\n        />\r\n      </Form.Group>\r\n      {handleCitySelector()}\r\n\r\n      <Form.Group>\r\n        <Form.Label>Birthday</Form.Label>\r\n        <Form.Control\r\n          required\r\n          type=\"date\"\r\n          value={birthday}\r\n          onChange={(e: any) => {\r\n            setBirthday(e.target.value);\r\n          }}\r\n        />\r\n      </Form.Group>\r\n\r\n      <Button\r\n        variant=\"primary\"\r\n        type=\"submit\"\r\n        style={styles.formSubmitButtonStyle}\r\n      >\r\n        Submit\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n//////////////////////////////Container//////////////////////////////////\r\nconst MapStateToProps: ReactRedux.MapStateToProps<\r\n  StateProps,\r\n  OwnProps,\r\n  RootReducerState\r\n> = (state, ownProps) => {\r\n  return {\r\n    listCities: state.cities.data,\r\n    listGroups: state.groups.data,\r\n    fetching: state.students.isFetching\r\n  };\r\n};\r\n\r\nconst MapDispatchToProps: ReactRedux.MapDispatchToProps<\r\n  DispatchProps,\r\n  OwnProps\r\n> = {\r\n  handlePostStudent: Actions.PostStudents,\r\n  handleLoadGroups: Actions.FetchGroups\r\n};\r\n\r\nexport default ReactRedux.connect(\r\n  MapStateToProps,\r\n  MapDispatchToProps\r\n)(FormStudent);\r\n","import React, { useState } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { Group, Professor } from \"../reducers/dataTypes\";\r\nimport * as ReactRedux from \"react-redux\";\r\nimport { RootReducerState } from \"../reducers/dataTypes\";\r\nimport { Actions } from \"../reducers/actions\";\r\nimport * as styles from \"../components/stylesComponent\";\r\nexport interface OwnProps {}\r\nexport interface StateProps {\r\n  listProfessors: Professor[];\r\n}\r\nexport interface DispatchProps {\r\n  handlePostGroup: (group: Group) => void;\r\n}\r\n\r\ntype FormGroupProps = OwnProps & StateProps & DispatchProps;\r\n\r\nconst FormGroup: React.SFC<FormGroupProps> = ({\r\n  listProfessors,\r\n  handlePostGroup\r\n}) => {\r\n  const [name, setName] = useState<string>(\"\");\r\n  const [professorId, setProfessorId] = useState<number>(1);\r\n\r\n  const handleResetProfessorId = () => {\r\n    if (listProfessors.length) setProfessorId(listProfessors[0].id);\r\n  };\r\n\r\n  const handlesResetAll = () => {\r\n    setName(\"\");\r\n    handleResetProfessorId();\r\n  };\r\n\r\n  const handleSubmit = (event: any) => {\r\n    event.preventDefault();\r\n    handlesResetAll();\r\n\r\n    let group: Group = {\r\n      name: name,\r\n      professorId: professorId,\r\n      id: 0\r\n    };\r\n    handlePostGroup(group);\r\n  };\r\n\r\n  const handleProfessorSelector = () => {\r\n    return (\r\n      <Form.Group>\r\n        <Form.Label>Professor</Form.Label>\r\n        <Form.Control\r\n          as=\"select\"\r\n          value={professorId}\r\n          onChange={(e: any) => {\r\n            setProfessorId(Number(e.target.value));\r\n          }}\r\n        >\r\n          {listProfessors.map(prof => (\r\n            <option key={prof.id} value={prof.id}>\r\n              {prof.name}\r\n            </option>\r\n          ))}\r\n        </Form.Control>\r\n      </Form.Group>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit} style={styles.formGroupBodyStyle}>\r\n      <Form.Group>\r\n        <Form.Label>Group name</Form.Label>\r\n        <Form.Control\r\n          pattern=\"[a-zA-Z0-9-_]*\"\r\n          value={name}\r\n          required\r\n          type=\"text\"\r\n          placeholder=\"Enter group name\"\r\n          onChange={(e: any) => {\r\n            setName(e.target.value);\r\n          }}\r\n        />\r\n      </Form.Group>\r\n      {handleProfessorSelector()}\r\n\r\n      <Button\r\n        variant=\"primary\"\r\n        type=\"submit\"\r\n        style={styles.formSubmitButtonStyle}\r\n      >\r\n        Submit\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst MapStateToProps: ReactRedux.MapStateToProps<\r\n  StateProps,\r\n  OwnProps,\r\n  RootReducerState\r\n> = (state, ownProps) => {\r\n  return { listProfessors: state.professors.data };\r\n};\r\n\r\nconst MapDispatchToProps: ReactRedux.MapDispatchToProps<\r\n  DispatchProps,\r\n  OwnProps\r\n> = {\r\n  handlePostGroup: Actions.PostGroup\r\n};\r\n\r\nexport default ReactRedux.connect(\r\n  MapStateToProps,\r\n  MapDispatchToProps\r\n)(FormGroup);\r\n","import React, { Fragment } from \"react\";\r\nimport FormStudent from \"./formStudent\";\r\nimport FormGroup from \"./formGroup\";\r\nimport * as styles from \"../components/stylesComponent\";\r\nimport { Route, Switch, NavLink, Redirect } from \"react-router-dom\";\r\nimport {\r\n  studentFormRoute,\r\n  groupFormRoute,\r\n  insertFormRoute\r\n} from \"../utils/definitions\";\r\nimport { Nav } from \"react-bootstrap\";\r\n\r\nexport interface InsertProps {}\r\n\r\nconst Insert: React.SFC<InsertProps> = () => {\r\n  const handleIsActive = (location: any, path: string): boolean => {\r\n    return location.pathname === path ? true : false;\r\n  };\r\n\r\n  const handleInsertLink = (path: string, text: string) => {\r\n    return (\r\n      <NavLink\r\n        to={path}\r\n        style={styles.navBar2LinkDesactiveStyle}\r\n        activeStyle={styles.navBar2LinkActiveStyle}\r\n        isActive={(match, location) => handleIsActive(location, path)}\r\n      >\r\n        {text}\r\n      </NavLink>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Nav variant=\"pills\" style={styles.navBar2BodyStyle}>\r\n        <Nav.Item>\r\n          {handleInsertLink(insertFormRoute + studentFormRoute, \"Student\")}\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          {handleInsertLink(insertFormRoute + groupFormRoute, \"Group\")}\r\n        </Nav.Item>\r\n      </Nav>\r\n\r\n      <Switch>\r\n        <Route path={insertFormRoute + studentFormRoute}>\r\n          <FormStudent />\r\n        </Route>\r\n        <Route path={insertFormRoute + groupFormRoute}>\r\n          <FormGroup />\r\n        </Route>\r\n        <Redirect to={insertFormRoute + studentFormRoute} />\r\n      </Switch>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Insert;\r\n","import _ from \"lodash\";\r\nimport { Group, City, Professor, Student } from \"../reducers/dataTypes\";\r\n\r\nconst defaultResponse: string = \"< Not found >\";\r\n\r\nexport const IdToName = (id: number, list: Group[] | City[]): string => {\r\n  if (list.length === 0) return defaultResponse;\r\n  if (list.length === 1) {\r\n    return list[0].id === id ? list[0].name : defaultResponse;\r\n  } else {\r\n    let index: number = _.findIndex(list, obj => obj.id === id);\r\n\r\n    return index >= 0 ? list[index].name : defaultResponse;\r\n  }\r\n};\r\n\r\nexport const NameToID = (name: string, list: Group[] | City[]): number => {\r\n  if (list.length === 0) return -1;\r\n  if (list.length === 1) {\r\n    return list[0].name === name ? list[0].id : -1;\r\n  } else {\r\n    let index: number = _.findIndex(list, obj => obj.name === name);\r\n    return list[index].id;\r\n  }\r\n};\r\n\r\nexport const StudentToProfessorName = (\r\n  student: Student,\r\n  listGroups: Group[],\r\n  listProfessors: Professor[]\r\n): string => {\r\n  let group: Group | undefined = _.find(\r\n    listGroups,\r\n    group => group.id === student.groupId\r\n  );\r\n  let professor: Professor | undefined = _.find(\r\n    listProfessors,\r\n    professor => professor.id === group?.professorId\r\n  );\r\n\r\n  return professor ? professor.name : defaultResponse;\r\n};\r\n","export type SexTypes = \"Male\" | \"Female\";\r\nexport type FilterType = \"All\" | \"Group\" | \"City\" | \"Professor\";\r\nexport const filterTypeArray: FilterType[] = [\r\n  \"All\",\r\n  \"Group\",\r\n  \"Professor\",\r\n  \"City\"\r\n];\r\nexport type FilterOption = number;\r\n\r\nexport interface FilterVs {\r\n  type: FilterType;\r\n  option: FilterOption;\r\n}\r\nexport const defaultFilterVs: FilterVs = { type: \"All\", option: 0 };\r\n\r\nexport interface Student {\r\n  id: number;\r\n  name: string;\r\n  age: number;\r\n  sex: SexTypes;\r\n  email: string;\r\n  birthday: string;\r\n  cityId: number;\r\n  groupId: number;\r\n}\r\nexport interface Group {\r\n  id: number;\r\n  name: string;\r\n  professorId: number;\r\n}\r\nexport interface Professor {\r\n  id: number;\r\n  name: string;\r\n}\r\nexport interface City {\r\n  id: number;\r\n  name: string;\r\n}\r\n////////////////////////////////////////////////////////////////\r\nexport interface FetchGenericState<T> {\r\n  data: T[];\r\n  isUpdated: boolean;\r\n  isFetching: boolean;\r\n  errorFetch: boolean;\r\n}\r\nexport const defaultFetchingState: FetchGenericState<any> = {\r\n  data: [],\r\n  isFetching: false,\r\n  isUpdated: false,\r\n  errorFetch: false\r\n};\r\n//////////////////////////PAYLOAD TYPES////////////////////////\r\nexport type Item = \"students\" | \"professors\" | \"groups\" | \"cities\";\r\nexport interface Payload_SuccessFetch {\r\n  item: Item;\r\n  data: any[];\r\n}\r\n\r\nexport interface RootReducerState {\r\n  students: FetchGenericState<Student>;\r\n  professors: FetchGenericState<Professor>;\r\n  groups: FetchGenericState<Group>;\r\n  cities: FetchGenericState<City>;\r\n  vsFilter: FilterVs;\r\n  isOnline: boolean;\r\n}\r\nexport const defaultRootReducerState: RootReducerState = {\r\n  cities: { ...defaultFetchingState },\r\n  students: { ...defaultFetchingState },\r\n  groups: { ...defaultFetchingState },\r\n  professors: { ...defaultFetchingState },\r\n  vsFilter: defaultFilterVs,\r\n  isOnline: true\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Row, FormControl, Col, Container, Button } from \"react-bootstrap\";\r\nimport * as styles from \"../components/stylesComponent\";\r\nimport {\r\n  City,\r\n  Group,\r\n  Professor,\r\n  filterTypeArray,\r\n  FilterOption,\r\n  FilterType,\r\n  FilterVs,\r\n  defaultFilterVs\r\n} from \"../reducers/dataTypes\";\r\n\r\nimport * as ReactRedux from \"react-redux\";\r\nimport { RootReducerState } from \"../reducers/dataTypes\";\r\nimport { Actions } from \"../reducers/actions\";\r\n\r\nexport interface OwnProps {}\r\nexport interface StateProps {\r\n  listGroups: Group[];\r\n  listCities: City[];\r\n  listProfessor: Professor[];\r\n  currentFilterVs: FilterVs;\r\n}\r\nexport interface DispatchProps {\r\n  handleChangeFilterVs: (filterVs: FilterVs) => void;\r\n}\r\n\r\ntype FilterProps = OwnProps & StateProps & DispatchProps;\r\n\r\nconst Filter: React.SFC<FilterProps> = ({\r\n  listCities,\r\n  listGroups,\r\n  listProfessor,\r\n  currentFilterVs,\r\n  handleChangeFilterVs\r\n}) => {\r\n  const [filter, setFilter] = useState<FilterType>(\"All\");\r\n  const [filterOption, setFilterOption] = useState<FilterOption>(0);\r\n\r\n  const [filterOptionArray, setFilterOptionArray] = useState<any[]>([]);\r\n\r\n  useEffect(() => {\r\n    setFilter(currentFilterVs.type);\r\n    setFilterOption(currentFilterVs.option);\r\n    if (currentFilterVs.option === defaultFilterVs.option)\r\n      setFilterOptionArray([]);\r\n  }, [currentFilterVs]);\r\n\r\n  const handleChangeFilter = (filter: FilterType) => {\r\n    setFilter(filter);\r\n    switch (filter) {\r\n      case \"City\":\r\n        setFilterOption(listCities[0].id);\r\n        setFilterOptionArray(listCities);\r\n        break;\r\n      case \"Group\":\r\n        setFilterOption(listGroups[0].id);\r\n        setFilterOptionArray(listGroups);\r\n        break;\r\n      case \"Professor\":\r\n        setFilterOption(listProfessor[0].id);\r\n        setFilterOptionArray(listProfessor);\r\n        break;\r\n      case \"All\":\r\n        setFilterOptionArray([]);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleShowChangeFilter = () => {\r\n    return (\r\n      <FormControl\r\n        as=\"select\"\r\n        value={filter}\r\n        onChange={(e: any) => {\r\n          handleChangeFilter(e.target.value);\r\n        }}\r\n      >\r\n        {filterTypeArray.map((option, id) => (\r\n          <option key={id}>{option}</option>\r\n        ))}\r\n      </FormControl>\r\n    );\r\n  };\r\n\r\n  const handleShowChangeFilterOption = () => {\r\n    return (\r\n      <FormControl\r\n        as=\"select\"\r\n        value={filterOption}\r\n        onChange={(e: any) => {\r\n          setFilterOption(Number(e.target.value));\r\n        }}\r\n      >\r\n        {filterOptionArray.map((option, id) => (\r\n          <option key={id} value={option.id}>\r\n            {option.name}\r\n          </option>\r\n        ))}\r\n      </FormControl>\r\n    );\r\n  };\r\n\r\n  const handleShowFilterButton = () => {\r\n    return (\r\n      <Container style={styles.applyFilterButtonContainerStyle}>\r\n        <Button\r\n          style={styles.filterButtonStyle}\r\n          onClick={() => {\r\n            handleChangeFilterVs({ type: filter, option: filterOption });\r\n          }}\r\n        >\r\n          Filter\r\n        </Button>\r\n      </Container>\r\n    );\r\n  };\r\n  const handleShowResetFilterButton = () => {\r\n    return (\r\n      <Container style={styles.resetFilterButtonContainerStyle}>\r\n        <Button\r\n          style={styles.filterButtonStyle}\r\n          onClick={() => {\r\n            handleChangeFilterVs(defaultFilterVs);\r\n          }}\r\n        >\r\n          Show All\r\n        </Button>\r\n      </Container>\r\n    );\r\n  };\r\n  return (\r\n    <Row style={styles.filterBodyStyle}>\r\n      <Col sm={3}>{handleShowChangeFilter()}</Col>\r\n      <Col sm={3}>{handleShowChangeFilterOption()}</Col>\r\n      <Col>{handleShowFilterButton()}</Col>\r\n      <Col>{handleShowResetFilterButton()}</Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nconst MapStateToProps: ReactRedux.MapStateToProps<\r\n  StateProps,\r\n  OwnProps,\r\n  RootReducerState\r\n> = (state, ownProps) => {\r\n  return {\r\n    listProfessor: state.professors.data,\r\n    listCities: state.cities.data,\r\n    listGroups: state.groups.data,\r\n    currentFilterVs: state.vsFilter\r\n  };\r\n};\r\n\r\nconst MapDispatchToProps: ReactRedux.MapDispatchToProps<\r\n  DispatchProps,\r\n  OwnProps\r\n> = {\r\n  handleChangeFilterVs: Actions.ChangeVsFilterAction\r\n};\r\n\r\nexport default ReactRedux.connect(MapStateToProps, MapDispatchToProps)(Filter);\r\n","import React, { useEffect, Fragment } from \"react\";\r\nimport { Student, Group, City, Professor } from \"../reducers/dataTypes\";\r\nimport * as ReactRedux from \"react-redux\";\r\nimport { RootReducerState } from \"../reducers/dataTypes\";\r\nimport { Actions } from \"../reducers/actions\";\r\nimport { Table, Button } from \"react-bootstrap\";\r\nimport { IdToName, StudentToProfessorName } from \"../utils/utilsFunctions\";\r\nimport * as styles from \"../components/stylesComponent\";\r\nimport _ from \"lodash\";\r\nimport Filter from \"./filter\";\r\nconst fields: string[] = [\r\n  \"#\",\r\n  \"Name\",\r\n  \"Group\",\r\n  \"Email\",\r\n  \"Sex\",\r\n  \"Age\",\r\n  \"Birthplace\",\r\n  \"Birthday\",\r\n  \"Main professor\",\r\n  \"Delete\"\r\n];\r\n\r\nexport interface OwnProps {}\r\nexport interface StateProps {\r\n  listStudents: Student[];\r\n  listGroups: Group[];\r\n  listCities: City[];\r\n  listProfessors: Professor[];\r\n}\r\nexport interface DispatchProps {\r\n  handleDeleteStudent: (student: Student) => void;\r\n  handleLoadStudents: () => void;\r\n  handleLoadGroup: () => void;\r\n}\r\ntype ListStudentsProps = OwnProps & StateProps & DispatchProps;\r\n\r\nconst ListStudents: React.SFC<ListStudentsProps> = ({\r\n  listStudents,\r\n  listGroups,\r\n  listCities,\r\n  listProfessors,\r\n  handleDeleteStudent,\r\n  handleLoadStudents,\r\n  handleLoadGroup\r\n}) => {\r\n  useEffect(() => {\r\n    handleLoadStudents();\r\n    handleLoadGroup();\r\n  }, []);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Filter />\r\n      <Table striped bordered hover style={styles.listTableBodyStyle}>\r\n        <thead>\r\n          <tr>\r\n            {fields.map((field, id) => (\r\n              <th key={id}>{field}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {listStudents.map(student => (\r\n            <tr key={student.id}>\r\n              <td>{student.id}</td>\r\n              <td>{student.name}</td>\r\n              <td>{IdToName(student.groupId, listGroups)}</td>\r\n              <td>{student.email}</td>\r\n              <td>{student.sex}</td>\r\n              <td>{student.age}</td>\r\n              <td>{IdToName(student.cityId, listCities)}</td>\r\n              <td>{student.birthday}</td>\r\n              <td>\r\n                {StudentToProfessorName(student, listGroups, listProfessors)}\r\n              </td>\r\n              <td>\r\n                <Button\r\n                  style={styles.listDeleteButtonStyle}\r\n                  onClick={() => {\r\n                    handleDeleteStudent(student);\r\n                  }}\r\n                >\r\n                  Delete\r\n                </Button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\n//////////////////////////////////////Container///////////////////////////\r\n\r\nconst MapStateToProps: ReactRedux.MapStateToProps<\r\n  StateProps,\r\n  OwnProps,\r\n  RootReducerState\r\n> = (state, ownProps) => {\r\n  var listStudents: Student[];\r\n\r\n  switch (state.vsFilter.type) {\r\n    case \"City\":\r\n      listStudents = _.filter(\r\n        state.students.data,\r\n        student => student.cityId === state.vsFilter.option\r\n      );\r\n      break;\r\n    case \"Group\":\r\n      listStudents = _.filter(\r\n        state.students.data,\r\n        student => student.groupId === state.vsFilter.option\r\n      );\r\n      break;\r\n    case \"Professor\":\r\n      var group: Group | undefined = _.find(\r\n        state.groups.data,\r\n        group => group.professorId === state.vsFilter.option\r\n      );\r\n\r\n      listStudents =\r\n        typeof group === undefined\r\n          ? state.students.data\r\n          : _.filter(\r\n              state.students.data,\r\n              student => student.groupId === group?.id\r\n            );\r\n      break;\r\n    case \"All\":\r\n    default:\r\n      listStudents = state.students.data;\r\n      break;\r\n  }\r\n\r\n  return {\r\n    listStudents: listStudents,\r\n    listCities: state.cities.data,\r\n    listGroups: state.groups.data,\r\n    listProfessors: state.professors.data\r\n  };\r\n};\r\n\r\nconst MapDispatchToProps: ReactRedux.MapDispatchToProps<\r\n  DispatchProps,\r\n  OwnProps\r\n> = {\r\n  handleDeleteStudent: Actions.DeleteStudent,\r\n  handleLoadGroup: Actions.FetchGroups,\r\n  handleLoadStudents: Actions.FetchStudents\r\n};\r\n\r\nexport default ReactRedux.connect(\r\n  MapStateToProps,\r\n  MapDispatchToProps\r\n)(ListStudents);\r\n","import React, { useEffect } from \"react\";\r\nimport { Group, Professor } from \"../reducers/dataTypes\";\r\nimport * as ReactRedux from \"react-redux\";\r\nimport { RootReducerState } from \"../reducers/dataTypes\";\r\nimport { Actions } from \"../reducers/actions\";\r\nimport { Table, Button } from \"react-bootstrap\";\r\nimport { IdToName } from \"../utils/utilsFunctions\";\r\nimport * as styles from \"../components/stylesComponent\";\r\nconst fields: string[] = [\"#\", \"Name\", \"Main professor\", \"Delete\"];\r\n\r\nexport interface OwnProps {}\r\nexport interface StateProps {\r\n  listGroups: Group[];\r\n  listProfessors: Professor[];\r\n}\r\nexport interface DispatchProps {\r\n  handleDeleteGroup: (group: Group) => void;\r\n  handleLoadProfessor: () => void;\r\n  handleLoadGroup: () => void;\r\n}\r\ntype ListGroupsProps = OwnProps & StateProps & DispatchProps;\r\n\r\nconst ListGroups: React.SFC<ListGroupsProps> = ({\r\n  listGroups,\r\n  listProfessors,\r\n  handleDeleteGroup,\r\n  handleLoadGroup,\r\n  handleLoadProfessor\r\n}) => {\r\n  useEffect(() => {\r\n    handleLoadProfessor();\r\n    handleLoadGroup();\r\n  }, []);\r\n\r\n  return (\r\n    <Table striped bordered hover style={styles.listTableBodyStyle}>\r\n      <thead>\r\n        <tr>\r\n          {fields.map((field, id) => (\r\n            <th key={id}>{field}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {listGroups.map(group => (\r\n          <tr key={group.id}>\r\n            <td>{group.id}</td>\r\n            <td>{group.name}</td>\r\n            <td>{IdToName(group.professorId, listProfessors)}</td>\r\n            <td>\r\n              <Button\r\n                style={styles.listDeleteButtonStyle}\r\n                onClick={() => {\r\n                  handleDeleteGroup(group);\r\n                }}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\n//////////////////////////////////////Container///////////////////////////\r\n\r\nconst MapStateToProps: ReactRedux.MapStateToProps<\r\n  StateProps,\r\n  OwnProps,\r\n  RootReducerState\r\n> = (state, ownProps) => {\r\n  return {\r\n    listGroups: state.groups.data,\r\n    listProfessors: state.professors.data\r\n  };\r\n};\r\n\r\nconst MapDispatchToProps: ReactRedux.MapDispatchToProps<\r\n  DispatchProps,\r\n  OwnProps\r\n> = {\r\n  handleLoadProfessor: Actions.FetchProfessors,\r\n  handleLoadGroup: Actions.FetchGroups,\r\n  handleDeleteGroup: Actions.DeleteGroup\r\n};\r\n\r\nexport default ReactRedux.connect(\r\n  MapStateToProps,\r\n  MapDispatchToProps\r\n)(ListGroups);\r\n","import React, { Fragment } from \"react\";\r\nimport * as styles from \"../components/stylesComponent\";\r\nimport ListStudent from \"./listStudents\";\r\nimport ListGroup from \"./listGroups\";\r\nimport { Route, Switch, NavLink, Redirect } from \"react-router-dom\";\r\nimport {\r\n  groupListRoute,\r\n  studentListRoute,\r\n  registerListRoute\r\n} from \"../utils/definitions\";\r\nimport { Nav } from \"react-bootstrap\";\r\n\r\nexport interface RegisterProps {}\r\n\r\nconst Register: React.SFC<RegisterProps> = () => {\r\n  const handleIsActive = (location: any, path: string): boolean => {\r\n    return location.pathname === path ? true : false;\r\n  };\r\n\r\n  const handleRegisterLink = (path: string, text: string) => {\r\n    return (\r\n      <NavLink\r\n        to={path}\r\n        style={styles.navBar2LinkDesactiveStyle}\r\n        activeStyle={styles.navBar2LinkActiveStyle}\r\n        isActive={(match, location) => handleIsActive(location, path)}\r\n      >\r\n        {text}\r\n      </NavLink>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Nav variant=\"pills\" style={styles.navBar2BodyStyle}>\r\n        <Nav.Item>\r\n          {handleRegisterLink(registerListRoute + studentListRoute, \"Student\")}\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          {handleRegisterLink(registerListRoute + groupListRoute, \"Group\")}\r\n        </Nav.Item>\r\n      </Nav>\r\n\r\n      <Switch>\r\n        <Route path={registerListRoute + studentListRoute}>\r\n          <ListStudent />\r\n        </Route>\r\n        <Route path={registerListRoute + groupListRoute}>\r\n          <ListGroup />\r\n        </Route>\r\n        <Redirect to={registerListRoute + studentListRoute} />\r\n      </Switch>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { homeRoute } from \"../utils/definitions\";\r\nimport * as ReactRedux from \"react-redux\";\r\nimport { RootReducerState } from \"../reducers/dataTypes\";\r\nexport interface OwnProps {\r\n  component: any;\r\n  path: string;\r\n}\r\nexport interface StateProps {\r\n  isOnline: boolean;\r\n}\r\nexport interface DispatchProps {}\r\n\r\ntype RouteConnectedProps = OwnProps & StateProps & DispatchProps;\r\nconst RouteConnected: React.SFC<RouteConnectedProps> = ({\r\n  component: Component,\r\n  path,\r\n  isOnline\r\n}) => {\r\n  return isOnline ? (\r\n    <Route path={path} component={Component} />\r\n  ) : (\r\n    <Redirect to={homeRoute} />\r\n  );\r\n};\r\n\r\nconst MapStateToProps: ReactRedux.MapStateToProps<\r\n  StateProps,\r\n  OwnProps,\r\n  RootReducerState\r\n> = (state, ownProps) => {\r\n  return {\r\n    isOnline: state.isOnline\r\n  };\r\n};\r\n\r\nconst MapDispatchToProps: ReactRedux.MapDispatchToProps<\r\n  DispatchProps,\r\n  OwnProps\r\n> = {};\r\n\r\nexport default ReactRedux.connect(\r\n  MapStateToProps,\r\n  MapDispatchToProps\r\n)(RouteConnected);\r\n","import React, { useEffect } from \"react\";\r\nimport * as ReactRedux from \"react-redux\";\r\n\r\nimport { Container } from \"react-bootstrap\";\r\nimport NavBar from \"./presentational/navBar\";\r\nimport Home from \"./presentational/home\";\r\nimport Insert from \"./presentational/insert\";\r\nimport Register from \"./presentational/register\";\r\nimport RouteConnected from \"./components/routeConnected\";\r\nimport {\r\n  homeRoute,\r\n  insertFormRoute,\r\n  registerListRoute\r\n} from \"./utils/definitions\";\r\n\r\nimport { RootReducerState } from \"./reducers/dataTypes\";\r\nimport { Actions } from \"./reducers/actions\";\r\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\r\n\r\nexport interface OwnProps {}\r\nexport interface StateProps {}\r\nexport interface DispatchProps {\r\n  loadCities: () => void;\r\n  loadProffesors: () => void;\r\n  checkIsOnline: () => void;\r\n}\r\n\r\ntype AppConnectedProps = OwnProps & StateProps & DispatchProps;\r\n\r\nconst AppConnected: React.SFC<AppConnectedProps> = ({\r\n  loadCities,\r\n  loadProffesors,\r\n  checkIsOnline\r\n}) => {\r\n  const startTimer = () => {\r\n    setInterval(() => {\r\n      checkIsOnline();\r\n    }, 5000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadCities();\r\n    loadProffesors();\r\n    startTimer();\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <BrowserRouter>\r\n        <NavBar />\r\n        <Switch>\r\n          <Route exact path={homeRoute} component={Home} />\r\n          <RouteConnected path={insertFormRoute} component={Insert} />\r\n          <RouteConnected path={registerListRoute} component={Register} />\r\n          <Redirect to={homeRoute} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst MapStateToProps: ReactRedux.MapStateToProps<\r\n  StateProps,\r\n  OwnProps,\r\n  RootReducerState\r\n> = (state, ownProps) => {\r\n  return {\r\n    error: state.cities.errorFetch\r\n  };\r\n};\r\n\r\nconst MapDispatchToProps: ReactRedux.MapDispatchToProps<\r\n  DispatchProps,\r\n  OwnProps\r\n> = {\r\n  loadCities: Actions.FetchCities,\r\n  loadProffesors: Actions.FetchProfessors,\r\n  checkIsOnline: Actions.CheckIsOnlineThunk\r\n};\r\n\r\nexport default ReactRedux.connect(\r\n  MapStateToProps,\r\n  MapDispatchToProps\r\n)(AppConnected);\r\n","import React from \"react\";\r\nimport AppConnected from \"./AppConnected\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport thunk, { ThunkMiddleware } from \"redux-thunk\";\r\nimport { RootReducer } from \"./reducers/rootReducer\";\r\nimport { RootReducerState } from \"./reducers/dataTypes\";\r\nimport { OwnAction } from \"./reducers/actions\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\n\r\nconst store = createStore(\r\n  RootReducer,\r\n  applyMiddleware(thunk as ThunkMiddleware<RootReducerState, OwnAction>)\r\n);\r\n\r\nexport interface AppProps {}\r\nconst App: React.SFC<AppProps> = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <AppConnected />\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { RootReducerState, defaultRootReducerState } from \"./dataTypes\";\r\nimport _ from \"lodash\";\r\nimport { Reducer } from \"redux\";\r\nimport { OwnAction } from \"./actions\";\r\n\r\nexport const RootReducer: Reducer<RootReducerState, OwnAction> = (\r\n  state = defaultRootReducerState,\r\n  action\r\n) => {\r\n  let tmpState = { ...state };\r\n  switch (action.type) {\r\n    case \"FETCHING\":\r\n      tmpState[action.item].isFetching = true;\r\n      break;\r\n    case \"ERROR_FETCH\":\r\n      tmpState[action.item].isFetching = false;\r\n      tmpState[action.item].errorFetch = true;\r\n      break;\r\n    case \"SUCCESS_FETCH\":\r\n      tmpState[action.item].isFetching = false;\r\n      tmpState[action.item].errorFetch = false;\r\n      tmpState[action.item].isUpdated = true;\r\n\r\n      tmpState[action.item].data = action.data;\r\n      break;\r\n    case \"SUCCESS_POST\":\r\n      tmpState[action.item].isFetching = false;\r\n      tmpState[action.item].errorFetch = false;\r\n      tmpState[action.item].isUpdated = false;\r\n      break;\r\n    case \"SUCCESS_DELETE\":\r\n      tmpState[action.item].data = _.filter(\r\n        tmpState[action.item].data,\r\n        data => data.id !== action.id\r\n      );\r\n\r\n      tmpState[action.item].isFetching = false;\r\n      tmpState[action.item].errorFetch = false;\r\n      tmpState[action.item].isUpdated = true;\r\n\r\n      //In this backend, when we delete a group all student of this group are deleted too\r\n      if (action.item === \"groups\") tmpState.students.isUpdated = false;\r\n\r\n      break;\r\n    case \"CHANGE_FILTER\":\r\n      tmpState.vsFilter = action.vsFilter;\r\n      break;\r\n    case \"IS_ONLINE\":\r\n      tmpState.isOnline = action.value;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return tmpState;\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}