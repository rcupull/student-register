{"version":3,"sources":["components/stylesComponent.tsx","utils/definitions.tsx","presentational/navBar.tsx","presentational/home.tsx","reducers/actions.tsx","presentational/formStudent.tsx","presentational/formGroup.tsx","presentational/insert.tsx","utils/utilsFunctions.tsx","utils/dataTypes.tsx","presentational/filter.tsx","presentational/listStudents.tsx","presentational/listGroups.tsx","presentational/register.tsx","components/routeConnected.tsx","AppConnected.tsx","reducers/rootReducer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["desactiveColor","navBarLinkStyle","padding","fontSize","display","color","borderRadius","navBarLinkDesactiveStyle","backgroundColor","navBarLinkActiveStyle","navBarLinkItemStyle","navBarBodyStyle","borderColor","navBar2LinkStyle","navBar2LinkDesactiveStyle","navBar2LinkActiveStyle","navBar2BodyStyle","formSubmitButtonStyle","formBodyStyle","border","width","formStudentBodyStyle","formGroupBodyStyle","filterBodyStyle","filterButtonStyle","applyFilterButtonContainerStyle","textAlign","resetFilterButtonContainerStyle","listTableBodyStyle","listDeleteButtonStyle","homeCardBodyStyle","margin","hostName","studentsURL","groupURL","getStudentsRequestConfig","method","url","getGroupRequestConfig","getCitiesRequestConfig","getProfessorsRequestConfig","postStudentRequestConfig","deleteStudentRequestConfig","deleteGroupRequestConfig","postGroupRequestConfig","NavBar","handleInsertLink","path","text","to","style","styles","activeStyle","isActive","match","location","_","split","pathname","handleIsActive","Nav","variant","activeKey","Item","ReactRedux","state","ownProps","error","Card","Body","Title","Text","Link","href","Actions","FetchCitiesThunk","dispatch","type","axios","def","then","res","payload","data","catch","FetchGroupsThunk","FetchProfessorsThunk","FetchStudentsThunk","PostStudentThunk","student","PostStudentSucces","PostGroupThunk","group","DeleteStudentThunk","id","DeleteStudentSucces","DeleteGroupThunk","DeleteGroupSucces","ChangeFilterVsAction","filterVs","MapDispatchToProps","handlePostStudent","handleloadGroups","listCities","cities","listGroups","groups","fetching","useState","name","setName","age","setAge","email","setEmail","groupId","setGroupId","sex","setSex","cityId","setCityId","birthday","setBirthday","handleResetCityId","length","handleResetGroupId","useEffect","Form","onSubmit","event","preventDefault","Number","Group","Label","Control","pattern","value","required","placeholder","onChange","e","target","as","map","key","min","max","city","Button","handlePostGroup","listProfessors","professors","professorId","setProfessorId","handlesResetAll","prof","Insert","insertFormRoute","IdToName","list","index","findIndex","obj","filterTypeArray","defaultFilterVs","option","handleChangeFilterVs","listProfessor","currentFilterVs","filter","setFilter","filterOption","setFilterOption","filterOptionArray","setFilterOptionArray","Row","Col","sm","FormControl","handleChangeFilter","Container","onClick","fields","handleDeleteStudent","handleLoadGroup","handleLoadStudents","listStudents","students","find","undefined","Table","striped","bordered","hover","field","professor","StudentToProfessorName","handleLoadProfessor","handleDeleteGroup","Register","handleRegisterLink","registerListRoute","Component","component","loadCities","loadProffesors","setTimeout","time","setTime","startTimer","setInterval","handleCheckError","clearInterval","exact","Home","initialState","store","createStore","action","isStudentsUpdated","isGroupsUpdated","applyMiddleware","thunk","App","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"gOAGMA,EAAyB,qBAGzBC,EAAkC,CACtCC,QAAS,aACTC,SAAU,SACVC,QAAS,QACTC,MAAO,QACPC,aAAc,QAGHC,EAAwC,eAChDN,EADgD,CAEnDO,gBAAiBR,IAGNS,EAAqC,eAC7CR,EAD6C,CAEhDO,gBAjB0B,sBAmBfE,EAAsC,CACjDR,QAAS,cAGES,EAAkC,CAC7CC,YAAa,OACbV,QAAS,UAILW,EAAmC,CACvCX,QAAS,aACTC,SAAU,SACVC,QAAS,SAGEU,EAAyC,eACjDD,EADiD,CAEpDR,MAAOL,IAGIe,EAAsC,eAC9CF,EAD8C,CAEjDR,MA1C0B,sBA6CfW,EAAmC,CAC9CJ,YAAa,OACbV,QAAS,UAGEe,EAAwC,CACnDT,gBAAiBR,EACjBY,YAAaZ,GAGFkB,EAAgC,CAC3CC,OAAQ,gBACRjB,QAAS,OACTkB,MAAO,MACPR,YAAa,QAEFS,EAAoC,eAC5CH,GAEQI,EAAkC,eAC1CJ,GAIQK,EAAkC,CAC7CrB,QAAS,QAGEsB,EAAoC,CAC/ChB,gBAAiBR,EACjBY,YAAaZ,GAGFyB,EAAkD,CAC7DC,UAAW,QAEAC,EAAkD,CAC7DD,UAAW,SAIAE,EAAqC,CAChDT,OAAQ,sBAGGU,EAAwC,CACnDrB,gBAAiBR,EACjBY,YAAaZ,GAIF8B,EAAoC,CAC/CC,OAAQ,WACRZ,OAAQ,sBCnGJa,EAAW,mBAOJC,EAAcD,mBACdE,EAAWF,iBAIXG,EAA+C,CAC1DC,OAAQ,MACRC,IAAKJ,GAEMK,EAA4C,CACvDF,OAAQ,MACRC,IAAKH,GAEMK,EAA6C,CACxDH,OAAQ,MACRC,IAZuBL,gCAcZQ,EAAiD,CAC5DJ,OAAQ,MACRC,IAjB0BL,oCAoBfS,EAA+C,CAC1DL,OAAQ,OACRC,IAAKJ,GAGMS,EAAiD,CAC5DN,OAAQ,SACRC,IAAKJ,GAGMU,EAA+C,CAC1DP,OAAQ,SACRC,IAAKH,GAGMU,EAA6C,CACxDR,OAAQ,OACRC,IAAKH,G,gBCAQW,EApCwB,WACrC,IAKMC,EAAmB,SAACC,EAAcC,GACtC,OACE,kBAAC,IAAD,CACEC,GAAIF,EACJG,MAAOC,EACPC,YAAaD,EACbE,SAAU,SAACC,EAAOC,GAAR,OAXO,SAACA,EAAeR,GAErC,MADuB,IAAMS,IAAEC,MAAMF,EAASG,SAAU,KAAK,KACzCX,EASeY,CAAeJ,EAAUR,KAEvDC,IAKP,OACE,kBAACY,EAAA,EAAD,CAAKC,QAAQ,OAAOC,UAAU,IAAIZ,MAAOC,GACvC,kBAACS,EAAA,EAAIG,KAAL,CAAUb,MAAOC,GACdL,EDkBgB,IClBY,SAG/B,kBAACc,EAAA,EAAIG,KAAL,CAAUb,MAAOC,GACdL,EDoBsB,UCpBY,WAGrC,kBAACc,EAAA,EAAIG,KAAL,CAAUb,MAAOC,GACdL,EDYwB,YCZY,e,QCK9BkB,OAXX,SAACC,EAAOC,GACV,MAAO,CACLC,MAAOF,EAAME,SAOb,GAEWH,EApCoB,SAAC,GAAe,IAAbG,EAAY,EAAZA,MACpC,OACE,gBAACC,EAAA,EAAD,CAAMlB,MAAOC,GACX,gBAACiB,EAAA,EAAKC,KAAN,KACE,gBAACD,EAAA,EAAKE,MAAN,sDACiD,IAC9CH,EAAQ,sBAAwB,IAEnC,gBAACC,EAAA,EAAKG,KAAN,uEAEE,gBAACH,EAAA,EAAKI,KAAN,CAAWC,KAAK,6CAAhB,6CAFF,uF,iCCwJKC,GAAU,CACrBC,iBAzFuB,kBAAM,SAACC,GAC9BA,EAjDO,CAAEC,KAAM,aAwDfC,IAAMC,GACHC,MAJa,SAACC,GACfL,EAzCK,CAAEC,KAAM,uBAAwBK,QAyCHD,EAAIE,UAIrCC,OARW,WACZR,EAhDK,CAAEC,KAAM,qBAuIfQ,iBA9EuB,kBAAM,SAACT,GAC9BA,EA7DO,CAAEC,KAAM,aAoEfC,IAAMC,GACHC,MAJa,SAACC,GACfL,EAxDK,CAAEC,KAAM,uBAAwBK,QAwDJD,EAAIE,UAIpCC,OARW,WACZR,EA5DK,CAAEC,KAAM,qBAwIfS,qBAvG2B,kBAAM,SAACV,GAClCA,EArCO,CAAEC,KAAM,aA4CfC,IAAMC,GACHC,MAJa,SAACC,GACfL,EA1BK,CAAEC,KAAM,2BAA4BK,QA0BHD,EAAIE,UAIzCC,OARW,WACZR,EApCK,CAAEC,KAAM,qBAyIfU,mBApHyB,kBAAM,SAACX,GAChCA,EAzBO,CAAEC,KAAM,aAgCfC,IAAMC,GACHC,MAJa,SAACC,GACfL,EAvBK,CAAEC,KAAM,yBAA0BK,QAuBJD,EAAIE,UAItCC,OARW,WACZR,EAxBK,CAAEC,KAAM,qBA0IfW,iBApEuB,SAACC,GAAD,OAAsB,SAC7Cb,GAEAA,EA5EO,CAAEC,KAAM,aAmFfC,IAAM,eAAKC,EAAN,CAAoCI,KAAMM,KAC5CT,MAJa,SAACC,GACfL,EA/FsB,SAACa,GACzB,MAAO,CAAEZ,KAAM,uBAAwBK,QAASO,GA8FrCC,CAAkBT,EAAIE,UAI9BC,OARW,WACZR,EA3EK,CAAEC,KAAM,qBA2Ifc,eAvDqB,SAACC,GAAD,OAAkB,SAAChB,GACxCA,EAxFO,CAAEC,KAAM,aA+FfC,IAAM,eAAKC,EAAN,CAAkCI,KAAMS,KAC1CZ,MAJa,SAACC,GACfL,EApGK,CAAEC,KAAM,0BAwGZO,OARW,WACZR,EAvFK,CAAEC,KAAM,qBA4IfgB,mBA3CyB,SAACJ,GAAD,OAAsB,SAC/Cb,GAEAA,EAvGO,CAAEC,KAAM,aAwGf,IAMIxC,EAAc0C,EAA+B1C,IAC7C0C,EAA+B1C,IAC/B,GACJyC,IAAM,eAAKC,EAAN,CAAsC1C,IAAKA,EAAM,IAAMoD,EAAQK,MACjEd,MAPa,SAACC,GACfL,EAvHwB,SAACa,GAC3B,MAAO,CAAEZ,KAAM,yBAA0BK,QAASO,GAsHvCM,CAAoBN,OAO5BL,OAXW,WACZR,EAtGK,CAAEC,KAAM,qBA6IfmB,iBA1BuB,SAACJ,GAAD,OAAkB,SACzChB,GAEAA,EAzHO,CAAEC,KAAM,aA0Hf,IAMIxC,EAAc0C,EAA6B1C,IAC3C0C,EAA6B1C,IAC7B,GACJyC,IAAM,eAAKC,EAAN,CAAoC1C,IAAKA,EAAM,IAAMuD,EAAME,MAC7Dd,MAPa,SAACC,GACfL,EAnIsB,SAACgB,GACzB,MAAO,CAAEf,KAAM,uBAAwBK,QAASU,GAkIrCK,CAAkBL,OAO1BR,OAXW,WACZR,EAxHK,CAAEC,KAAM,qBA8IfqB,qBA9H2B,SAACC,GAC5B,MAAO,CAAEtB,KAAM,gBAAiBK,QAASiB,KCiKrCC,GAGF,CACFC,kBAAmB3B,GAAQc,iBAC3Bc,iBAAkB5B,GAAQW,kBAGbrB,QAhBX,SAACC,EAAOC,GACV,MAAO,CACLqC,WAAYtC,EAAMuC,OAClBC,WAAYxC,EAAMyC,OAClBC,SAAU1C,EAAM0C,YAclBP,GAFapC,EA5MkC,SAAC,GAM3C,IALLyC,EAKI,EALJA,WACAF,EAII,EAJJA,WAEAF,GAEI,EAHJM,SAGI,EAFJN,mBACAC,EACI,EADJA,iBACI,EACoBM,mBAAiB,IADrC,mBACGC,EADH,KACSC,EADT,OAEkBF,mBAAiB,IAFnC,mBAEGG,EAFH,KAEQC,EAFR,OAGsBJ,mBAAiB,IAHvC,mBAGGK,EAHH,KAGUC,EAHV,OAI0BN,mBAAiB,GAJ3C,mBAIGO,EAJH,KAIYC,EAJZ,OAKkBR,mBAAmB,QALrC,mBAKGS,EALH,KAKQC,EALR,OAMwBV,mBAAiB,GANzC,mBAMGW,EANH,KAMWC,EANX,OAO4BZ,mBAAiB,IAP7C,mBAOGa,EAPH,KAOaC,EAPb,KASEC,EAAoB,WACpBpB,EAAWqB,QAAQJ,EAAUjB,EAAW,GAAGT,KAG3C+B,EAAqB,WACrBpB,EAAWmB,QAAQR,EAAWX,EAAW,GAAGX,KAGlDgC,qBAAU,WACRH,IACAE,IACAvB,MACC,IAwFH,OACE,kBAACyB,EAAA,EAAD,CAAMC,SA7Ea,SAACC,GACpBA,EAAMC,iBAEN7B,EAAkB,CAChBQ,KAAMA,EACNE,IAAKoB,OAAOpB,GACZM,IAAKA,EACLI,SAAUA,EACVF,OAAQA,EACRN,MAAOA,EACPE,QAASA,EACTrB,GAAI,IApBNgB,EAAQ,IACRE,EAAO,IACPE,EAAS,IACTW,IACAP,EAAO,QACPK,IACAD,EAAY,KAgFkBxE,MAAOC,GACnC,kBAAC4E,EAAA,EAAKK,MAAN,KACE,kBAACL,EAAA,EAAKM,MAAN,aACA,kBAACN,EAAA,EAAKO,QAAN,CACEC,QAAQ,aACRC,MAAO3B,EACP4B,UAAQ,EACR5D,KAAK,OACL6D,YAAY,kBACZC,SAAU,SAACC,GACT9B,EAAQ8B,EAAEC,OAAOL,WApEvB,kBAACT,EAAA,EAAKK,MAAN,KACE,kBAACL,EAAA,EAAKM,MAAN,cACA,kBAACN,EAAA,EAAKO,QAAN,CACEQ,GAAG,SACHN,MAAOrB,EACPwB,SAAU,SAACC,GACTxB,EAAWe,OAAOS,EAAEC,OAAOL,UAG5B/B,EAAWsC,KAAI,SAAAnD,GAAK,OACnB,4BAAQoD,IAAKpD,EAAME,GAAI0C,MAAO5C,EAAME,IACjCF,EAAMiB,WA8Df,kBAACkB,EAAA,EAAKK,MAAN,KACE,kBAACL,EAAA,EAAKM,MAAN,cACA,kBAACN,EAAA,EAAKO,QAAN,CACEG,UAAQ,EACR5D,KAAK,QACL2D,MAAOvB,EACPyB,YAAY,cACZC,SAAU,SAACC,GACT1B,EAAS0B,EAAEC,OAAOL,WAvCxB,kBAACT,EAAA,EAAKK,MAAN,KACE,kBAACL,EAAA,EAAKM,MAAN,YACA,kBAACN,EAAA,EAAKO,QAAN,CACEQ,GAAG,SACHH,SAAU,SAACC,GACTtB,EAAOsB,EAAEC,OAAOL,SAGlB,wCACA,4CAoCJ,kBAACT,EAAA,EAAKK,MAAN,KACE,kBAACL,EAAA,EAAKM,MAAN,YACA,kBAACN,EAAA,EAAKO,QAAN,CACEG,UAAQ,EACR5D,KAAK,SACLoE,IAAI,IACJC,IAAI,MACJR,YAAY,YACZF,MAAOzB,EACP4B,SAAU,SAACC,GACT5B,EAAO4B,EAAEC,OAAOL,WA5EtB,kBAACT,EAAA,EAAKK,MAAN,KACE,kBAACL,EAAA,EAAKM,MAAN,aACA,kBAACN,EAAA,EAAKO,QAAN,CACEQ,GAAG,SACHN,MAAOjB,EACPoB,SAAU,SAACC,GACTpB,EAAUW,OAAOS,EAAEC,OAAOL,UAG3BjC,EAAWwC,KAAI,SAAAI,GAAI,OAClB,4BAAQH,IAAKG,EAAKrD,GAAI0C,MAAOW,EAAKrD,IAC/BqD,EAAKtC,WAuEd,kBAACkB,EAAA,EAAKK,MAAN,KACE,kBAACL,EAAA,EAAKM,MAAN,iBACA,kBAACN,EAAA,EAAKO,QAAN,CACEG,UAAQ,EACR5D,KAAK,OACL2D,MAAOf,EACPkB,SAAU,SAACC,GACTlB,EAAYkB,EAAEC,OAAOL,WAK3B,kBAACY,EAAA,EAAD,CACEvF,QAAQ,UACRgB,KAAK,SACL3B,MAAOC,GAHT,cC5FAiD,GAGF,CAAEiD,gBAAiB3E,GAAQiB,gBAEhB3B,QATX,SAACC,EAAOC,GACV,MAAO,CAAEoF,eAAgBrF,EAAMsF,cAU/BnD,GAFapC,EA1F8B,SAAC,GAGvC,IAFLsF,EAEI,EAFJA,eACAD,EACI,EADJA,gBACI,EACoBzC,mBAAiB,IADrC,mBACGC,EADH,KACSC,EADT,OAEkCF,mBAAiB,GAFnD,mBAEG4C,EAFH,KAEgBC,EAFhB,KAQEC,EAAkB,WACtB5C,EAAQ,IAJJwC,EAAe1B,QAAQ6B,EAAeH,EAAe,GAAGxD,KAyC9D,OACE,kBAACiC,EAAA,EAAD,CAAMC,SAlCa,SAACC,GACpBA,EAAMC,iBACNwB,IAOAL,EALmB,CACjBxC,KAAMA,EACN2C,YAAaA,EACb1D,GAAI,KA2BwB5C,MAAOC,GACnC,kBAAC4E,EAAA,EAAKK,MAAN,KACE,kBAACL,EAAA,EAAKM,MAAN,mBACA,kBAACN,EAAA,EAAKO,QAAN,CACEC,QAAQ,iBACRC,MAAO3B,EACP4B,UAAQ,EACR5D,KAAK,OACL6D,YAAY,mBACZC,SAAU,SAACC,GACT9B,EAAQ8B,EAAEC,OAAOL,WA9BvB,kBAACT,EAAA,EAAKK,MAAN,KACE,kBAACL,EAAA,EAAKM,MAAN,kBACA,kBAACN,EAAA,EAAKO,QAAN,CACEQ,GAAG,SACHN,MAAOgB,EACPb,SAAU,SAACC,GACTa,EAAetB,OAAOS,EAAEC,OAAOL,UAGhCc,EAAeP,KAAI,SAAAY,GAAI,OACtB,4BAAQX,IAAKW,EAAK7D,GAAI0C,MAAOmB,EAAK7D,IAC/B6D,EAAK9C,WAyBd,kBAACuC,EAAA,EAAD,CACEvF,QAAQ,UACRgB,KAAK,SACL3B,MAAOC,GAHT,c,SC3BSyG,GA1CwB,WACrC,IAIM9G,EAAmB,SAACC,EAAcC,GACtC,OACE,kBAAC,IAAD,CACEC,GAAIF,EACJG,MAAOC,EACPC,YAAaD,EACbE,SAAU,SAACC,EAAOC,GAAR,OAVO,SAACA,EAAeR,GACrC,OAAOQ,EAASG,WAAaX,EASMY,CAAeJ,EAAUR,KAEvDC,IAKP,OACE,kBAAC,WAAD,KACE,kBAACY,EAAA,EAAD,CAAKC,QAAQ,QAAQX,MAAOC,GAC1B,kBAACS,EAAA,EAAIG,KAAL,KACGjB,EAAiB+G,uBAAoC,YAExD,kBAACjG,EAAA,EAAIG,KAAL,KACGjB,EAAiB+G,qBAAkC,WAIxD,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAO9G,KAAM8G,wBACX,kBAAC,GAAD,OAEF,kBAAC,KAAD,CAAO9G,KAAM8G,sBACX,kBAAC,GAAD,OAEF,kBAAC,KAAD,CAAU5G,GAAI4G,4B,SC7CTC,GAAW,SAAChE,EAAYiE,GACnC,GAAoB,IAAhBA,EAAKnC,OAAc,MAHO,gBAI9B,GAAoB,IAAhBmC,EAAKnC,OACP,OAAOmC,EAAK,GAAGjE,KAAOA,EAAKiE,EAAK,GAAGlD,KALP,gBAO5B,IAAImD,EAAgBxG,IAAEyG,UAAUF,GAAM,SAAAG,GAAG,OAAIA,EAAIpE,KAAOA,KAExD,OAAOkE,GAAS,EAAID,EAAKC,GAAOnD,KATJ,iB,2BCDnBsD,GAAgC,CAC3C,MACA,QACA,YACA,QASWC,GAA4B,CAAEvF,KAAM,MAAOwF,OAAQ,GC+I1DjE,GAGF,CACFkE,qBAAsB5F,GAAQwB,sBAGjBlC,QAhBX,SAACC,EAAOC,GACV,MAAO,CACLqG,cAAetG,EAAMsF,WACrBhD,WAAYtC,EAAMuC,OAClBC,WAAYxC,EAAMyC,OAClB8D,gBAAiBvG,EAAMuG,mBAWwBpE,GAApCpC,EAtIwB,SAAC,GAMjC,IALLuC,EAKI,EALJA,WACAE,EAII,EAJJA,WACA8D,EAGI,EAHJA,cACAC,EAEI,EAFJA,gBACAF,EACI,EADJA,qBACI,EACwB1D,mBAAqB,OAD7C,mBACG6D,EADH,KACWC,EADX,OAEoC9D,mBAAuB,GAF3D,mBAEG+D,EAFH,KAEiBC,EAFjB,OAI8ChE,mBAAgB,IAJ9D,mBAIGiE,EAJH,KAIsBC,EAJtB,KAMJhD,qBAAU,WACR4C,EAAUF,EAAgB3F,MAC1B+F,EAAgBJ,EAAgBH,QAC5BG,EAAgBH,SAAWD,GAAgBC,QAC7CS,EAAqB,MACtB,CAACN,IAuFJ,OACE,kBAACO,GAAA,EAAD,CAAK7H,MAAOC,GACV,kBAAC6H,GAAA,EAAD,CAAKC,GAAI,GA9DT,kBAACC,GAAA,EAAD,CACEpC,GAAG,SACHN,MAAOiC,EACP9B,SAAU,SAACC,IA5BU,SAAC6B,GAE1B,OADAC,EAAUD,GACFA,GACN,IAAK,OACHG,EAAgBrE,EAAW,GAAGT,IAC9BgF,EAAqBvE,GACrB,MACF,IAAK,QACHqE,EAAgBnE,EAAW,GAAGX,IAC9BgF,EAAqBrE,GACrB,MACF,IAAK,YACHmE,EAAgBL,EAAc,GAAGzE,IACjCgF,EAAqBP,GACrB,MACF,IAAK,MACHO,EAAqB,KAanBK,CAAmBvC,EAAEC,OAAOL,SAG7B2B,GAAgBpB,KAAI,SAACsB,EAAQvE,GAAT,OACnB,4BAAQkD,IAAKlD,GAAKuE,QAuDtB,kBAACW,GAAA,EAAD,CAAKC,GAAI,GA/CT,kBAACC,GAAA,EAAD,CACEpC,GAAG,SACHN,MAAOmC,EACPhC,SAAU,SAACC,GACTgC,EAAgBzC,OAAOS,EAAEC,OAAOL,UAGjCqC,EAAkB9B,KAAI,SAACsB,EAAQvE,GAAT,OACrB,4BAAQkD,IAAKlD,EAAI0C,MAAO6B,EAAOvE,IAC5BuE,EAAOxD,WAuCd,kBAACmE,GAAA,EAAD,KA9BA,kBAACI,EAAA,EAAD,CAAWlI,MAAOC,GAChB,kBAACiG,EAAA,EAAD,CACElG,MAAOC,EACPkI,QAAS,WACPf,EAAqB,CAAEzF,KAAM4F,EAAQJ,OAAQM,MAHjD,YA8BF,kBAACK,GAAA,EAAD,KAjBA,kBAACI,EAAA,EAAD,CAAWlI,MAAOC,GAChB,kBAACiG,EAAA,EAAD,CACElG,MAAOC,EACPkI,QAAS,WACPf,EAAqBF,MAHzB,kBClHFkB,GAAmB,CACvB,IACA,OACA,QACA,QACA,MACA,MACA,aACA,WACA,iBACA,UAyHIlF,GAGF,CACFmF,oBAAqB7G,GAAQmB,mBAC7B2F,gBAAiB9G,GAAQW,iBACzBoG,mBAAoB/G,GAAQa,oBAGfvB,QAlDX,SAACC,EAAOC,GACV,IAAIwH,EAEJ,OAAQzH,EAAMuG,gBAAgB3F,MAC5B,IAAK,OACH6G,EAAelI,IAAEiH,OACfxG,EAAM0H,UACN,SAAAlG,GAAO,OAAIA,EAAQ8B,SAAWtD,EAAMuG,gBAAgBH,UAEtD,MACF,IAAK,QACHqB,EAAelI,IAAEiH,OACfxG,EAAM0H,UACN,SAAAlG,GAAO,OAAIA,EAAQ0B,UAAYlD,EAAMuG,gBAAgBH,UAEvD,MACF,IAAK,YACH,IAAIzE,EAA2BpC,IAAEoI,KAC/B3H,EAAMyC,QACN,SAAAd,GAAK,OAAIA,EAAM4D,cAAgBvF,EAAMuG,gBAAgBH,UAGvDqB,OACmBG,WAAVjG,EACH3B,EAAM0H,SACNnI,IAAEiH,OAAOxG,EAAM0H,UAAU,SAAAlG,GAAO,OAAIA,EAAQ0B,WAAR,OAAoBvB,QAApB,IAAoBA,OAApB,EAAoBA,EAAOE,OACrE,MACF,IAAK,MACL,QACE4F,EAAezH,EAAM0H,SAIzB,MAAO,CACLD,aAAcA,EACdnF,WAAYtC,EAAMuC,OAClBC,WAAYxC,EAAMyC,OAClB4C,eAAgBrF,EAAMsF,cAexBnD,GAFapC,EAjHoC,SAAC,GAQ7C,IAPL0H,EAOI,EAPJA,aACAjF,EAMI,EANJA,WACAF,EAKI,EALJA,WACA+C,EAII,EAJJA,eACAiC,EAGI,EAHJA,oBACAE,EAEI,EAFJA,mBACAD,EACI,EADJA,gBAOA,OALA1D,qBAAU,WACR2D,IACAD,MACC,IAGD,kBAAC,WAAD,KACE,kBAAC,GAAD,MACA,kBAACM,GAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAAC/I,MAAOC,GACnC,+BACE,4BACGmI,GAAOvC,KAAI,SAACmD,EAAOpG,GAAR,OACV,wBAAIkD,IAAKlD,GAAKoG,QAIpB,+BACGR,EAAa3C,KAAI,SAAAtD,GAAO,OACvB,wBAAIuD,IAAKvD,EAAQK,IACf,4BAAKL,EAAQK,IACb,4BAAKL,EAAQoB,MACb,4BAAKiD,GAASrE,EAAQ0B,QAASV,IAC/B,4BAAKhB,EAAQwB,OACb,4BAAKxB,EAAQ4B,KACb,4BAAK5B,EAAQsB,KACb,4BAAK+C,GAASrE,EAAQ8B,OAAQhB,IAC9B,4BAAKd,EAAQgC,UACb,4BH/CwB,SACpChC,EACAgB,EACA6C,GAEA,IAAI1D,EAA2BpC,IAAEoI,KAC/BnF,GACA,SAAAb,GAAK,OAAIA,EAAME,KAAOL,EAAQ0B,WAE5BgF,EAAmC3I,IAAEoI,KACvCtC,GACA,SAAA6C,GAAS,OAAIA,EAAUrG,MAAV,OAAiBF,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAO4D,gBAGvC,OAAO2C,EAAYA,EAAUtF,KArCC,gBGuEfuF,CAAuB3G,EAASgB,EAAY6C,IAE/C,4BACE,kBAACF,EAAA,EAAD,CACElG,MAAOC,EACPkI,QAAS,WACPE,EAAoB9F,KAHxB,qBCrEV6F,GAAmB,CAAC,IAAK,OAAQ,iBAAkB,UAuEnDlF,GAGF,CACFiG,oBAAqB3H,GAAQY,qBAC7BkG,gBAAiB9G,GAAQW,iBACzBiH,kBAAmB5H,GAAQsB,kBAGdhC,QAhBX,SAACC,EAAOC,GACV,MAAO,CACLuC,WAAYxC,EAAMyC,OAClB4C,eAAgBrF,EAAMsF,cAexBnD,GAFapC,EAlEgC,SAAC,GAMzC,IALLyC,EAKI,EALJA,WACA6C,EAII,EAJJA,eACAgD,EAGI,EAHJA,kBACAd,EAEI,EAFJA,gBACAa,EACI,EADJA,oBAOA,OALAvE,qBAAU,WACRuE,IACAb,MACC,IAGD,kBAACM,GAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAAC/I,MAAOC,GACnC,+BACE,4BACGmI,GAAOvC,KAAI,SAACmD,EAAOpG,GAAR,OACV,wBAAIkD,IAAKlD,GAAKoG,QAIpB,+BACGzF,EAAWsC,KAAI,SAAAnD,GAAK,OACnB,wBAAIoD,IAAKpD,EAAME,IACb,4BAAKF,EAAME,IACX,4BAAKF,EAAMiB,MACX,4BAAKiD,GAASlE,EAAM4D,YAAaF,IACjC,4BACE,kBAACF,EAAA,EAAD,CACElG,MAAOC,EACPkI,QAAS,WACPiB,EAAkB1G,KAHtB,oBCMC2G,GA1C4B,WACzC,IAIMC,EAAqB,SAACzJ,EAAcC,GACxC,OACE,kBAAC,IAAD,CACEC,GAAIF,EACJG,MAAOC,EACPC,YAAaD,EACbE,SAAU,SAACC,EAAOC,GAAR,OAVO,SAACA,EAAeR,GACrC,OAAOQ,EAASG,WAAaX,EASMY,CAAeJ,EAAUR,KAEvDC,IAKP,OACE,kBAAC,WAAD,KACE,kBAACY,EAAA,EAAD,CAAKC,QAAQ,QAAQX,MAAOC,GAC1B,kBAACS,EAAA,EAAIG,KAAL,KACGyI,EAAmBC,yBAAsC,YAE5D,kBAAC7I,EAAA,EAAIG,KAAL,KACGyI,EAAmBC,uBAAoC,WAI5D,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAO1J,KAAM0J,0BACX,kBAAC,GAAD,OAEF,kBAAC,KAAD,CAAO1J,KAAM0J,wBACX,kBAAC,GAAD,OAEF,kBAAC,KAAD,CAAUxJ,GAAIwJ,8BCRPzI,QAXX,SAACC,EAAOC,GACV,MAAO,CACLC,MAAOF,EAAME,SAOb,GAEWH,EA3BwC,SAAC,GAIjD,IAHM0I,EAGP,EAHJC,UACA5J,EAEI,EAFJA,KAGA,OADI,EADJoB,MAGE,kBAAC,KAAD,CAAUlB,GbgCW,Ma9BrB,kBAAC,KAAD,CAAOF,KAAMA,EAAM4J,UAAWD,OCkE5BtG,GAGF,CACFwG,WAAYlI,GAAQC,iBACpBkI,eAAgBnI,GAAQY,sBAGXtB,QAdX,SAACC,EAAOC,GACV,MAAO,CACLC,MAAOF,EAAME,SAcfiC,GAFapC,EAnEoC,SAAC,GAI7C,IAHL4I,EAGI,EAHJA,WACAC,EAEI,EAFJA,eACA1I,EACI,EADJA,MACI,EACoByC,mBAAyBkG,YAAW,cAAU,IADlE,mBACGC,EADH,KACSC,EADT,KAUEC,EAAa,WACjBD,EACEE,aAAY,WATdN,IACAC,MAUK,OAIDM,EAAmB,WACnBhJ,EACF8I,IAZFG,cAAcL,IAsBhB,OAJAjF,qBAAU,WACRqF,MACC,CAAChJ,IAGF,kBAACiH,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAOiC,OAAK,EAACtK,KdhBE,IcgBe4J,UAAWW,IACzC,kBAAC,GAAD,CAAgBvK,KdXK,UcWkB4J,UAAW/C,KAClD,kBAAC,GAAD,CAAgB7G,KdhBO,YcgBkB4J,UAAWJ,KACpD,kBAAC,KAAD,CAAUtJ,GdnBK,Y,kBe9BnBsK,GAAiC,CACrC/G,OAAQ,GACRmF,SAAU,GACVjF,OAAQ,GACR6C,WAAY,GACZpF,OAAO,EACPwC,UAAU,EACV6D,gBAAiBJ,I,SCtBboD,GAAQC,cDwBqD,WAG7D,IAFJxJ,EAEG,uDAFKsJ,GACRG,EACG,uCACH,OAAQA,EAAO7I,MACb,IAAK,WACH,OAAO,eAAKZ,EAAZ,CAAmB0C,UAAU,IAC/B,IAAK,cACH,OAAO,eAAK1C,EAAZ,CAAmB0C,UAAU,EAAOxC,OAAO,IAC7C,IAAK,yBACH,OAAO,eACFF,EADL,CAEEE,OAAO,EACPwC,UAAU,EACVgH,mBAAmB,EACnBhC,SAAU+B,EAAOxI,UAErB,IAAK,uBACH,OAAO,eACFjB,EADL,CAEEE,OAAO,EACPwC,UAAU,EACViH,iBAAiB,EACjBlH,OAAQgH,EAAOxI,UAEnB,IAAK,uBACH,OAAO,eACFjB,EADL,CAEEE,OAAO,EACPwC,UAAU,EACVH,OAAQkH,EAAOxI,UAEnB,IAAK,2BACH,OAAO,eACFjB,EADL,CAEEE,OAAO,EACPwC,UAAU,EACV4C,WAAYmE,EAAOxI,UAEvB,IAAK,uBACH,OAAO,eAAKjB,EAAZ,CAAmB0H,SAAS,GAAD,oBAAM1H,EAAM0H,UAAZ,CAAsB+B,EAAOxI,YAC1D,IAAK,yBACH,OAAO,eACFjB,EADL,CAEE0H,SAAUnI,IAAEiH,OACVxG,EAAM0H,UACN,SAAAlG,GAAO,OAAIA,EAAQK,KAAO4H,EAAOxI,QAAQY,QAG/C,IAAK,uBACH,OAAO,eACF7B,EADL,CAEEyC,OAAQlD,IAAEiH,OAAOxG,EAAMyC,QAAQ,SAAAd,GAAK,OAAIA,EAAME,KAAO4H,EAAOxI,QAAQY,QAExE,IAAK,qBACH,OAAO,eAAK7B,EAAZ,CAAmB2J,iBAAiB,IACtC,IAAK,gBACH,OAAO,eAAK3J,EAAZ,CAAmBuG,gBAAiBkD,EAAOxI,UAE7C,QACE,OAAOjB,KCpF0B4J,aAAgBC,OAWxCC,GARkB,WAC/B,OACE,kBAAC,IAAD,CAAUP,MAAOA,IACf,kBAAC,GAAD,QCFcQ,QACW,cAA7BC,OAAO1K,SAAS2K,UAEe,UAA7BD,OAAO1K,SAAS2K,UAEhBD,OAAO1K,SAAS2K,SAAS5K,MACvB,2D,MCZN6K,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1J,MAAK,SAAA2J,GACJA,EAAaC,gBAEdxJ,OAAM,SAAAjB,GACL0K,QAAQ1K,MAAMA,EAAM2K,c","file":"static/js/main.3565c692.chunk.js","sourcesContent":["/////////////////////////////NavBar////////////////////////////////////\r\nimport CSS from \"csstype\";\r\n\r\nconst desactiveColor: string = \"rgb(116, 128, 175)\";\r\nconst activeColor: string = \"rgb(91, 187, 130)\";\r\n///////////////////////////////////////////NAVBAR////////////////////////\r\nconst navBarLinkStyle: CSS.Properties = {\r\n  padding: \".5rem 1rem\",\r\n  fontSize: \"1.2rem\",\r\n  display: \"block\",\r\n  color: \"white\",\r\n  borderRadius: \"10px\"\r\n};\r\n\r\nexport const navBarLinkDesactiveStyle: CSS.Properties = {\r\n  ...navBarLinkStyle,\r\n  backgroundColor: desactiveColor\r\n};\r\n\r\nexport const navBarLinkActiveStyle: CSS.Properties = {\r\n  ...navBarLinkStyle,\r\n  backgroundColor: activeColor\r\n};\r\nexport const navBarLinkItemStyle: CSS.Properties = {\r\n  padding: \".5rem 1rem\"\r\n};\r\n\r\nexport const navBarBodyStyle: CSS.Properties = {\r\n  borderColor: \"gray\",\r\n  padding: \"0.5rem\"\r\n};\r\n\r\n////////////////////////////////////////////////////////\r\nconst navBar2LinkStyle: CSS.Properties = {\r\n  padding: \".5rem 1rem\",\r\n  fontSize: \"1.5rem\",\r\n  display: \"block\"\r\n};\r\n\r\nexport const navBar2LinkDesactiveStyle: CSS.Properties = {\r\n  ...navBar2LinkStyle,\r\n  color: desactiveColor\r\n};\r\n\r\nexport const navBar2LinkActiveStyle: CSS.Properties = {\r\n  ...navBar2LinkStyle,\r\n  color: activeColor\r\n};\r\n\r\nexport const navBar2BodyStyle: CSS.Properties = {\r\n  borderColor: \"gray\",\r\n  padding: \"0.5rem\"\r\n};\r\n////////////////////////////FORM////////////////////////\r\nexport const formSubmitButtonStyle: CSS.Properties = {\r\n  backgroundColor: desactiveColor,\r\n  borderColor: desactiveColor\r\n};\r\n\r\nexport const formBodyStyle: CSS.Properties = {\r\n  border: \"solid 0.01rem\",\r\n  padding: \"1rem\",\r\n  width: \"50%\",\r\n  borderColor: \"gray\"\r\n};\r\nexport const formStudentBodyStyle: CSS.Properties = {\r\n  ...formBodyStyle\r\n};\r\nexport const formGroupBodyStyle: CSS.Properties = {\r\n  ...formBodyStyle\r\n};\r\n\r\n////////////////////////////Filter////////////////////////\r\nexport const filterBodyStyle: CSS.Properties = {\r\n  padding: \"1rem\"\r\n};\r\n\r\nexport const filterButtonStyle: CSS.Properties = {\r\n  backgroundColor: desactiveColor,\r\n  borderColor: desactiveColor\r\n};\r\n\r\nexport const applyFilterButtonContainerStyle: CSS.Properties = {\r\n  textAlign: \"left\"\r\n};\r\nexport const resetFilterButtonContainerStyle: CSS.Properties = {\r\n  textAlign: \"right\"\r\n};\r\n/////////////////////////////LIST///////////////////////\r\n\r\nexport const listTableBodyStyle: CSS.Properties = {\r\n  border: \"solid 0.12rem gray\"\r\n};\r\n\r\nexport const listDeleteButtonStyle: CSS.Properties = {\r\n  backgroundColor: desactiveColor,\r\n  borderColor: desactiveColor\r\n};\r\n////////////////////////////Home////////////////////////\r\n\r\nexport const homeCardBodyStyle: CSS.Properties = {\r\n  margin: \"1.5rem 0\",\r\n  border: \"solid 0.05rem gray\"\r\n};\r\n","import { AxiosRequestConfig } from \"axios\";\r\n\r\n////////////////////////////////API/////////////////////////////\r\nconst hostName = \"http://localhost\";\r\nconst port = \":3001\";\r\nconst pathStudents = \"/students\";\r\nconst pathProfessors = \"/professors\";\r\nconst pathGroups = \"/groups\";\r\nconst pathCities = \"/cities\";\r\n\r\nexport const studentsURL = hostName + port + pathStudents;\r\nexport const groupURL = hostName + port + pathGroups;\r\nexport const professorURL = hostName + port + pathProfessors;\r\nexport const citiesURL = hostName + port + pathCities;\r\n\r\nexport const getStudentsRequestConfig: AxiosRequestConfig = {\r\n  method: \"GET\",\r\n  url: studentsURL\r\n};\r\nexport const getGroupRequestConfig: AxiosRequestConfig = {\r\n  method: \"GET\",\r\n  url: groupURL\r\n};\r\nexport const getCitiesRequestConfig: AxiosRequestConfig = {\r\n  method: \"GET\",\r\n  url: citiesURL\r\n};\r\nexport const getProfessorsRequestConfig: AxiosRequestConfig = {\r\n  method: \"GET\",\r\n  url: professorURL\r\n};\r\n\r\nexport const postStudentRequestConfig: AxiosRequestConfig = {\r\n  method: \"POST\",\r\n  url: studentsURL\r\n};\r\n\r\nexport const deleteStudentRequestConfig: AxiosRequestConfig = {\r\n  method: \"DELETE\",\r\n  url: studentsURL\r\n};\r\n\r\nexport const deleteGroupRequestConfig: AxiosRequestConfig = {\r\n  method: \"DELETE\",\r\n  url: groupURL\r\n};\r\n\r\nexport const postGroupRequestConfig: AxiosRequestConfig = {\r\n  method: \"POST\",\r\n  url: groupURL\r\n};\r\n\r\n//////////////////////////////////////ROUTES//////////////////////////\r\nexport const homeRoute = \"/\";\r\n\r\nexport const registerListRoute = \"/register\";\r\nexport const studentListRoute = \"/student-list\";\r\nexport const groupListRoute = \"/group-list\";\r\n\r\nexport const insertFormRoute = \"/insert\";\r\nexport const studentFormRoute = \"/student-form\";\r\nexport const groupFormRoute = \"/group-form\";\r\n","import React from \"react\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport * as styles from \"../components/stylesComponent\";\r\nimport {\r\n  homeRoute,\r\n  insertFormRoute,\r\n  registerListRoute\r\n} from \"../utils/definitions\";\r\n\r\nimport _ from \"lodash\";\r\nexport interface NavBarProps {}\r\n\r\nconst NavBar: React.SFC<NavBarProps> = () => {\r\n  const handleIsActive = (location: any, path: string): boolean => {\r\n    let pathname: string = \"/\" + _.split(location.pathname, \"/\")[1];\r\n    return pathname === path ? true : false;\r\n  };\r\n\r\n  const handleInsertLink = (path: string, text: string) => {\r\n    return (\r\n      <NavLink\r\n        to={path}\r\n        style={styles.navBarLinkDesactiveStyle}\r\n        activeStyle={styles.navBarLinkActiveStyle}\r\n        isActive={(match, location) => handleIsActive(location, path)}\r\n      >\r\n        {text}\r\n      </NavLink>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Nav variant=\"tabs\" activeKey=\"1\" style={styles.navBarBodyStyle}>\r\n      <Nav.Item style={styles.navBarLinkItemStyle}>\r\n        {handleInsertLink(homeRoute, \"Home\")}\r\n      </Nav.Item>\r\n\r\n      <Nav.Item style={styles.navBarLinkItemStyle}>\r\n        {handleInsertLink(insertFormRoute, \"Insert\")}\r\n      </Nav.Item>\r\n\r\n      <Nav.Item style={styles.navBarLinkItemStyle}>\r\n        {handleInsertLink(registerListRoute, \"Register\")}\r\n      </Nav.Item>\r\n    </Nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import * as React from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport * as styles from \"../components/stylesComponent\";\r\nimport { RootReducerState } from \"../reducers/rootReducer\";\r\nimport * as ReactRedux from \"react-redux\";\r\nexport interface OwnProps {}\r\nexport interface StateProps {\r\n  error: boolean;\r\n}\r\nexport interface DispatchProps {}\r\ntype HomeProps = OwnProps & StateProps & DispatchProps;\r\n\r\nconst Home: React.SFC<HomeProps> = ({ error }) => {\r\n  return (\r\n    <Card style={styles.homeCardBodyStyle}>\r\n      <Card.Body>\r\n        <Card.Title>\r\n          Application for the administration of students{\" \"}\r\n          {error ? \"<<CONNECTION FAIL>>\" : \"\"}\r\n        </Card.Title>\r\n        <Card.Text>\r\n          Download 'db.json' file from source code. Install json-server (\r\n          <Card.Link href=\"https://www.npmjs.com/package/json-server\">\r\n            https://www.npmjs.com/package/json-server\r\n          </Card.Link>\r\n          ) and write 'json-server --watch db.json --port 3001' for running\r\n          json-server.\r\n        </Card.Text>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst MapStateToProps: ReactRedux.MapStateToProps<\r\n  StateProps,\r\n  OwnProps,\r\n  RootReducerState\r\n> = (state, ownProps) => {\r\n  return {\r\n    error: state.error\r\n  };\r\n};\r\n\r\nconst MapDispatchToProps: ReactRedux.MapDispatchToProps<\r\n  DispatchProps,\r\n  OwnProps\r\n> = {};\r\n\r\nexport default ReactRedux.connect(MapStateToProps, MapDispatchToProps)(Home);\r\n","import { Action, Dispatch } from \"redux\";\r\nimport axios from \"axios\";\r\nimport * as def from \"../utils/definitions\";\r\nimport { Group, Professor, City, Student, FilterVs } from \"../utils/dataTypes\";\r\n\r\ntype ActionType =\r\n  | \"FETCHING\"\r\n  | \"FETCH_ERROR\"\r\n  | \"FETCH_STUDENTS_SUCCESS\"\r\n  | \"FETCH_CITIES_SUCCESS\"\r\n  | \"FETCH_GROUPS_SUCCESS\"\r\n  | \"FETCH_PROFESSORS_SUCCESS\"\r\n  | \"POST_STUDENT_SUCCESS\"\r\n  | \"POST_GROUP_SUCCESS\"\r\n  | \"DELETE_STUDENT_SUCCESS\"\r\n  | \"DELETE_GROUP_SUCCESS\"\r\n  | \"CHANGE_FILTER\";\r\n\r\nexport interface ReduxAction extends Action<ActionType> {\r\n  payload?: any;\r\n}\r\n///////////////////////////////////Action Creators///////////////////\r\nconst PostStudentSucces = (student: Student): ReduxAction => {\r\n  return { type: \"POST_STUDENT_SUCCESS\", payload: student };\r\n};\r\nconst DeleteStudentSucces = (student: Student): ReduxAction => {\r\n  return { type: \"DELETE_STUDENT_SUCCESS\", payload: student };\r\n};\r\nconst PostGroupSuccess = (): ReduxAction => {\r\n  return { type: \"POST_GROUP_SUCCESS\" };\r\n};\r\nconst DeleteGroupSucces = (group: Group): ReduxAction => {\r\n  return { type: \"DELETE_GROUP_SUCCESS\", payload: group };\r\n};\r\n//////////////////////////////////////////////////////////\r\nconst FetchingAction = (): ReduxAction => {\r\n  return { type: \"FETCHING\" };\r\n};\r\nconst FetchErrorAction = (): ReduxAction => {\r\n  return { type: \"FETCH_ERROR\" };\r\n};\r\n//////////////////////////////////////////////////////////\r\nconst FetchStudentSuccessAction = (data: Student[]): ReduxAction => {\r\n  return { type: \"FETCH_STUDENTS_SUCCESS\", payload: data };\r\n};\r\nconst FetchGroupSuccessAction = (data: Group[]): ReduxAction => {\r\n  return { type: \"FETCH_GROUPS_SUCCESS\", payload: data };\r\n};\r\nconst FetchCitiesSuccessAction = (data: City[]): ReduxAction => {\r\n  return { type: \"FETCH_CITIES_SUCCESS\", payload: data };\r\n};\r\nconst FetchProfessorsSuccessAction = (data: Professor[]): ReduxAction => {\r\n  return { type: \"FETCH_PROFESSORS_SUCCESS\", payload: data };\r\n};\r\n//////////////////////////////////////////////////////////\r\nconst ChangeFilterVsAction = (filterVs: FilterVs): ReduxAction => {\r\n  return { type: \"CHANGE_FILTER\", payload: filterVs };\r\n};\r\n\r\n//////////////////////////////////////////////////////////\r\nconst FetchStudentsThunk = () => (dispatch: Dispatch<ReduxAction>) => {\r\n  dispatch(FetchingAction());\r\n  const error = () => {\r\n    dispatch(FetchErrorAction());\r\n  };\r\n  const success = (res: any) => {\r\n    dispatch(FetchStudentSuccessAction(res.data));\r\n  };\r\n  axios(def.getStudentsRequestConfig)\r\n    .then(success)\r\n    .catch(error);\r\n};\r\nconst FetchProfessorsThunk = () => (dispatch: Dispatch<ReduxAction>) => {\r\n  dispatch(FetchingAction());\r\n  const error = () => {\r\n    dispatch(FetchErrorAction());\r\n  };\r\n  const success = (res: any) => {\r\n    dispatch(FetchProfessorsSuccessAction(res.data));\r\n  };\r\n  axios(def.getProfessorsRequestConfig)\r\n    .then(success)\r\n    .catch(error);\r\n};\r\nconst FetchCitiesThunk = () => (dispatch: Dispatch<ReduxAction>) => {\r\n  dispatch(FetchingAction());\r\n  const error = () => {\r\n    dispatch(FetchErrorAction());\r\n  };\r\n  const success = (res: any) => {\r\n    dispatch(FetchCitiesSuccessAction(res.data));\r\n  };\r\n  axios(def.getCitiesRequestConfig)\r\n    .then(success)\r\n    .catch(error);\r\n};\r\nconst FetchGroupsThunk = () => (dispatch: Dispatch<ReduxAction>) => {\r\n  dispatch(FetchingAction());\r\n  const error = () => {\r\n    dispatch(FetchErrorAction());\r\n  };\r\n  const success = (res: any) => {\r\n    dispatch(FetchGroupSuccessAction(res.data));\r\n  };\r\n  axios(def.getGroupRequestConfig)\r\n    .then(success)\r\n    .catch(error);\r\n};\r\n//////////////////////////////////////////////////////////\r\nconst PostStudentThunk = (student: Student) => (\r\n  dispatch: Dispatch<ReduxAction>\r\n) => {\r\n  dispatch(FetchingAction());\r\n  const error = () => {\r\n    dispatch(FetchErrorAction());\r\n  };\r\n  const success = (res: any) => {\r\n    dispatch(PostStudentSucces(res.data));\r\n  };\r\n  axios({ ...def.postStudentRequestConfig, data: student })\r\n    .then(success)\r\n    .catch(error);\r\n};\r\nconst PostGroupThunk = (group: Group) => (dispatch: Dispatch<ReduxAction>) => {\r\n  dispatch(FetchingAction());\r\n  const error = () => {\r\n    dispatch(FetchErrorAction());\r\n  };\r\n  const success = (res: any) => {\r\n    dispatch(PostGroupSuccess());\r\n  };\r\n  axios({ ...def.postGroupRequestConfig, data: group })\r\n    .then(success)\r\n    .catch(error);\r\n};\r\n//////////////////////////////////////////////////////////\r\nconst DeleteStudentThunk = (student: Student) => (\r\n  dispatch: Dispatch<ReduxAction>\r\n) => {\r\n  dispatch(FetchingAction());\r\n  const error = () => {\r\n    dispatch(FetchErrorAction());\r\n  };\r\n  const success = (res: any) => {\r\n    dispatch(DeleteStudentSucces(student));\r\n  };\r\n  let url: string = def.deleteStudentRequestConfig.url\r\n    ? def.deleteStudentRequestConfig.url\r\n    : \"\";\r\n  axios({ ...def.deleteStudentRequestConfig, url: url + \"/\" + student.id })\r\n    .then(success)\r\n    .catch(error);\r\n};\r\n\r\nconst DeleteGroupThunk = (group: Group) => (\r\n  dispatch: Dispatch<ReduxAction>\r\n) => {\r\n  dispatch(FetchingAction());\r\n  const error = () => {\r\n    dispatch(FetchErrorAction());\r\n  };\r\n  const success = (res: any) => {\r\n    dispatch(DeleteGroupSucces(group));\r\n  };\r\n  let url: string = def.deleteGroupRequestConfig.url\r\n    ? def.deleteGroupRequestConfig.url\r\n    : \"\";\r\n  axios({ ...def.deleteGroupRequestConfig, url: url + \"/\" + group.id })\r\n    .then(success)\r\n    .catch(error);\r\n};\r\n\r\nexport const Actions = {\r\n  FetchCitiesThunk,\r\n  FetchGroupsThunk,\r\n  FetchProfessorsThunk,\r\n  FetchStudentsThunk,\r\n  PostStudentThunk,\r\n  PostGroupThunk,\r\n  DeleteStudentThunk,\r\n  DeleteGroupThunk,\r\n  ChangeFilterVsAction\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { SexTypes } from \"../utils/dataTypes\";\r\nimport { City, Group, Student } from \"../utils/dataTypes\";\r\nimport * as styles from \"../components/stylesComponent\";\r\nimport * as ReactRedux from \"react-redux\";\r\nimport { RootReducerState } from \"../reducers/rootReducer\";\r\nimport { Actions } from \"../reducers/actions\";\r\nexport interface OwnProps {}\r\nexport interface StateProps {\r\n  listGroups: Group[];\r\n  listCities: City[];\r\n  fetching: boolean;\r\n}\r\nexport interface DispatchProps {\r\n  handlePostStudent: (student: Student) => void;\r\n  handleloadGroups: () => void;\r\n}\r\n\r\ntype FormStudentProps = OwnProps & StateProps & DispatchProps;\r\n\r\nconst FormStudent: React.SFC<FormStudentProps> = ({\r\n  listGroups,\r\n  listCities,\r\n  fetching,\r\n  handlePostStudent,\r\n  handleloadGroups\r\n}) => {\r\n  const [name, setName] = useState<string>(\"\");\r\n  const [age, setAge] = useState<string>(\"\");\r\n  const [email, setEmail] = useState<string>(\"\");\r\n  const [groupId, setGroupId] = useState<number>(0);\r\n  const [sex, setSex] = useState<SexTypes>(\"Male\");\r\n  const [cityId, setCityId] = useState<number>(0);\r\n  const [birthday, setBirthday] = useState<string>(\"\");\r\n\r\n  const handleResetCityId = () => {\r\n    if (listCities.length) setCityId(listCities[0].id);\r\n  };\r\n\r\n  const handleResetGroupId = () => {\r\n    if (listGroups.length) setGroupId(listGroups[0].id);\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleResetCityId();\r\n    handleResetGroupId();\r\n    handleloadGroups();\r\n  }, []);\r\n\r\n  const handlesResetAll = () => {\r\n    setName(\"\");\r\n    setAge(\"\");\r\n    setEmail(\"\");\r\n    handleResetGroupId();\r\n    setSex(\"Male\");\r\n    handleResetCityId();\r\n    setBirthday(\"\");\r\n  };\r\n\r\n  const handleSubmit = (event: any) => {\r\n    event.preventDefault();\r\n\r\n    handlePostStudent({\r\n      name: name,\r\n      age: Number(age),\r\n      sex: sex,\r\n      birthday: birthday,\r\n      cityId: cityId,\r\n      email: email,\r\n      groupId: groupId,\r\n      id: 0\r\n    });\r\n\r\n    handlesResetAll();\r\n  };\r\n\r\n  const handleGroupSelector = () => {\r\n    return (\r\n      <Form.Group>\r\n        <Form.Label>Group</Form.Label>\r\n        <Form.Control\r\n          as=\"select\"\r\n          value={groupId}\r\n          onChange={(e: any) => {\r\n            setGroupId(Number(e.target.value));\r\n          }}\r\n        >\r\n          {listGroups.map(group => (\r\n            <option key={group.id} value={group.id}>\r\n              {group.name}\r\n            </option>\r\n          ))}\r\n        </Form.Control>\r\n      </Form.Group>\r\n    );\r\n  };\r\n\r\n  const handleCitySelector = () => {\r\n    return (\r\n      <Form.Group>\r\n        <Form.Label>City</Form.Label>\r\n        <Form.Control\r\n          as=\"select\"\r\n          value={cityId}\r\n          onChange={(e: any) => {\r\n            setCityId(Number(e.target.value));\r\n          }}\r\n        >\r\n          {listCities.map(city => (\r\n            <option key={city.id} value={city.id}>\r\n              {city.name}\r\n            </option>\r\n          ))}\r\n        </Form.Control>\r\n      </Form.Group>\r\n    );\r\n  };\r\n\r\n  const handleSexSelector = () => {\r\n    return (\r\n      <Form.Group>\r\n        <Form.Label>Sex</Form.Label>\r\n        <Form.Control\r\n          as=\"select\"\r\n          onChange={(e: any) => {\r\n            setSex(e.target.value);\r\n          }}\r\n        >\r\n          <option>Male</option>\r\n          <option>Female</option>\r\n        </Form.Control>\r\n      </Form.Group>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit} style={styles.formStudentBodyStyle}>\r\n      <Form.Group>\r\n        <Form.Label>Name</Form.Label>\r\n        <Form.Control\r\n          pattern=\"[a-z A-Z]*\"\r\n          value={name}\r\n          required\r\n          type=\"text\"\r\n          placeholder=\"Enter full name\"\r\n          onChange={(e: any) => {\r\n            setName(e.target.value);\r\n          }}\r\n        />\r\n      </Form.Group>\r\n      {handleGroupSelector()}\r\n      <Form.Group>\r\n        <Form.Label>Email</Form.Label>\r\n        <Form.Control\r\n          required\r\n          type=\"email\"\r\n          value={email}\r\n          placeholder=\"Enter email\"\r\n          onChange={(e: any) => {\r\n            setEmail(e.target.value);\r\n          }}\r\n        />\r\n      </Form.Group>\r\n\r\n      {handleSexSelector()}\r\n      <Form.Group>\r\n        <Form.Label>Age</Form.Label>\r\n        <Form.Control\r\n          required\r\n          type=\"number\"\r\n          min=\"5\"\r\n          max=\"100\"\r\n          placeholder=\"Enter age\"\r\n          value={age}\r\n          onChange={(e: any) => {\r\n            setAge(e.target.value);\r\n          }}\r\n        />\r\n      </Form.Group>\r\n      {handleCitySelector()}\r\n\r\n      <Form.Group>\r\n        <Form.Label>Birthday</Form.Label>\r\n        <Form.Control\r\n          required\r\n          type=\"date\"\r\n          value={birthday}\r\n          onChange={(e: any) => {\r\n            setBirthday(e.target.value);\r\n          }}\r\n        />\r\n      </Form.Group>\r\n\r\n      <Button\r\n        variant=\"primary\"\r\n        type=\"submit\"\r\n        style={styles.formSubmitButtonStyle}\r\n      >\r\n        Submit\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n//////////////////////////////Container//////////////////////////////////\r\nconst MapStateToProps: ReactRedux.MapStateToProps<\r\n  StateProps,\r\n  OwnProps,\r\n  RootReducerState\r\n> = (state, ownProps) => {\r\n  return {\r\n    listCities: state.cities,\r\n    listGroups: state.groups,\r\n    fetching: state.fetching\r\n  };\r\n};\r\n\r\nconst MapDispatchToProps: ReactRedux.MapDispatchToProps<\r\n  DispatchProps,\r\n  OwnProps\r\n> = {\r\n  handlePostStudent: Actions.PostStudentThunk,\r\n  handleloadGroups: Actions.FetchGroupsThunk\r\n};\r\n\r\nexport default ReactRedux.connect(\r\n  MapStateToProps,\r\n  MapDispatchToProps\r\n)(FormStudent);\r\n","import React, { useState } from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport { Group, Professor } from \"../utils/dataTypes\";\r\nimport * as ReactRedux from \"react-redux\";\r\nimport { RootReducerState } from \"../reducers/rootReducer\";\r\nimport { Actions } from \"../reducers/actions\";\r\nimport * as styles from \"../components/stylesComponent\";\r\nexport interface OwnProps {}\r\nexport interface StateProps {\r\n  listProfessors: Professor[];\r\n}\r\nexport interface DispatchProps {\r\n  handlePostGroup: (group: Group) => void;\r\n}\r\n\r\ntype FormGroupProps = OwnProps & StateProps & DispatchProps;\r\n\r\nconst FormGroup: React.SFC<FormGroupProps> = ({\r\n  listProfessors,\r\n  handlePostGroup\r\n}) => {\r\n  const [name, setName] = useState<string>(\"\");\r\n  const [professorId, setProfessorId] = useState<number>(1);\r\n\r\n  const handleResetProfessorId = () => {\r\n    if (listProfessors.length) setProfessorId(listProfessors[0].id);\r\n  };\r\n\r\n  const handlesResetAll = () => {\r\n    setName(\"\");\r\n    handleResetProfessorId();\r\n  };\r\n\r\n  const handleSubmit = (event: any) => {\r\n    event.preventDefault();\r\n    handlesResetAll();\r\n\r\n    let group: Group = {\r\n      name: name,\r\n      professorId: professorId,\r\n      id: 0\r\n    };\r\n    handlePostGroup(group);\r\n  };\r\n\r\n  const handleProfessorSelector = () => {\r\n    return (\r\n      <Form.Group>\r\n        <Form.Label>Professor</Form.Label>\r\n        <Form.Control\r\n          as=\"select\"\r\n          value={professorId}\r\n          onChange={(e: any) => {\r\n            setProfessorId(Number(e.target.value));\r\n          }}\r\n        >\r\n          {listProfessors.map(prof => (\r\n            <option key={prof.id} value={prof.id}>\r\n              {prof.name}\r\n            </option>\r\n          ))}\r\n        </Form.Control>\r\n      </Form.Group>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit} style={styles.formGroupBodyStyle}>\r\n      <Form.Group>\r\n        <Form.Label>Group name</Form.Label>\r\n        <Form.Control\r\n          pattern=\"[a-zA-Z0-9-_]*\"\r\n          value={name}\r\n          required\r\n          type=\"text\"\r\n          placeholder=\"Enter group name\"\r\n          onChange={(e: any) => {\r\n            setName(e.target.value);\r\n          }}\r\n        />\r\n      </Form.Group>\r\n      {handleProfessorSelector()}\r\n\r\n      <Button\r\n        variant=\"primary\"\r\n        type=\"submit\"\r\n        style={styles.formSubmitButtonStyle}\r\n      >\r\n        Submit\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst MapStateToProps: ReactRedux.MapStateToProps<\r\n  StateProps,\r\n  OwnProps,\r\n  RootReducerState\r\n> = (state, ownProps) => {\r\n  return { listProfessors: state.professors };\r\n};\r\n\r\nconst MapDispatchToProps: ReactRedux.MapDispatchToProps<\r\n  DispatchProps,\r\n  OwnProps\r\n> = { handlePostGroup: Actions.PostGroupThunk };\r\n\r\nexport default ReactRedux.connect(\r\n  MapStateToProps,\r\n  MapDispatchToProps\r\n)(FormGroup);\r\n","import React, { Fragment } from \"react\";\r\nimport FormStudent from \"./formStudent\";\r\nimport FormGroup from \"./formGroup\";\r\nimport * as styles from \"../components/stylesComponent\";\r\nimport { Route, Switch, NavLink, Redirect } from \"react-router-dom\";\r\nimport {\r\n  studentFormRoute,\r\n  groupFormRoute,\r\n  insertFormRoute\r\n} from \"../utils/definitions\";\r\nimport { Nav } from \"react-bootstrap\";\r\n\r\nexport interface InsertProps {}\r\n\r\nconst Insert: React.SFC<InsertProps> = () => {\r\n  const handleIsActive = (location: any, path: string): boolean => {\r\n    return location.pathname === path ? true : false;\r\n  };\r\n\r\n  const handleInsertLink = (path: string, text: string) => {\r\n    return (\r\n      <NavLink\r\n        to={path}\r\n        style={styles.navBar2LinkDesactiveStyle}\r\n        activeStyle={styles.navBar2LinkActiveStyle}\r\n        isActive={(match, location) => handleIsActive(location, path)}\r\n      >\r\n        {text}\r\n      </NavLink>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Nav variant=\"pills\" style={styles.navBar2BodyStyle}>\r\n        <Nav.Item>\r\n          {handleInsertLink(insertFormRoute + studentFormRoute, \"Student\")}\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          {handleInsertLink(insertFormRoute + groupFormRoute, \"Group\")}\r\n        </Nav.Item>\r\n      </Nav>\r\n\r\n      <Switch>\r\n        <Route path={insertFormRoute + studentFormRoute}>\r\n          <FormStudent />\r\n        </Route>\r\n        <Route path={insertFormRoute + groupFormRoute}>\r\n          <FormGroup />\r\n        </Route>\r\n        <Redirect to={insertFormRoute + studentFormRoute} />\r\n      </Switch>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Insert;\r\n","import _ from \"lodash\";\r\nimport { Group, City, Professor, Student } from \"./dataTypes\";\r\n\r\nconst defaultResponse: string = \"< Not found >\";\r\n\r\nexport const IdToName = (id: number, list: Group[] | City[]): string => {\r\n  if (list.length === 0) return defaultResponse;\r\n  if (list.length === 1) {\r\n    return list[0].id === id ? list[0].name : defaultResponse;\r\n  } else {\r\n    let index: number = _.findIndex(list, obj => obj.id === id);\r\n\r\n    return index >= 0 ? list[index].name : defaultResponse;\r\n  }\r\n};\r\n\r\nexport const NameToID = (name: string, list: Group[] | City[]): number => {\r\n  if (list.length === 0) return -1;\r\n  if (list.length === 1) {\r\n    return list[0].name === name ? list[0].id : -1;\r\n  } else {\r\n    let index: number = _.findIndex(list, obj => obj.name === name);\r\n    return list[index].id;\r\n  }\r\n};\r\n\r\nexport const StudentToProfessorName = (\r\n  student: Student,\r\n  listGroups: Group[],\r\n  listProfessors: Professor[]\r\n): string => {\r\n  let group: Group | undefined = _.find(\r\n    listGroups,\r\n    group => group.id === student.groupId\r\n  );\r\n  let professor: Professor | undefined = _.find(\r\n    listProfessors,\r\n    professor => professor.id === group?.professorId\r\n  );\r\n\r\n  return professor ? professor.name : defaultResponse;\r\n};\r\n","export type SexTypes = \"Male\" | \"Female\";\r\nexport type FilterType = \"All\" | \"Group\" | \"City\" | \"Professor\";\r\nexport const filterTypeArray: FilterType[] = [\r\n  \"All\",\r\n  \"Group\",\r\n  \"Professor\",\r\n  \"City\"\r\n];\r\nexport type FilterOption = number;\r\n\r\nexport interface FilterVs {\r\n  type: FilterType;\r\n  option: FilterOption;\r\n}\r\n\r\nexport const defaultFilterVs: FilterVs = { type: \"All\", option: 0 };\r\nexport interface Student {\r\n  id: number;\r\n  name: string;\r\n  age: number;\r\n  sex: SexTypes;\r\n  email: string;\r\n  birthday: string;\r\n  cityId: number;\r\n  groupId: number;\r\n}\r\n\r\nexport interface Group {\r\n  id: number;\r\n  name: string;\r\n  professorId: number;\r\n}\r\nexport interface Professor {\r\n  id: number;\r\n  name: string;\r\n}\r\n\r\nexport interface City {\r\n  id: number;\r\n  name: string;\r\n}\r\n\r\n// export interface FetchGenericState<T> {\r\n//   data: T[];\r\n//   error: boolean;\r\n//   loading: boolean;\r\n// }\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Row, FormControl, Col, Container, Button } from \"react-bootstrap\";\r\nimport * as styles from \"../components/stylesComponent\";\r\nimport {\r\n  City,\r\n  Group,\r\n  Professor,\r\n  filterTypeArray,\r\n  FilterOption,\r\n  FilterType,\r\n  FilterVs,\r\n  defaultFilterVs\r\n} from \"../utils/dataTypes\";\r\n\r\nimport * as ReactRedux from \"react-redux\";\r\nimport { RootReducerState } from \"../reducers/rootReducer\";\r\nimport { Actions } from \"../reducers/actions\";\r\n\r\nexport interface OwnProps {}\r\nexport interface StateProps {\r\n  listGroups: Group[];\r\n  listCities: City[];\r\n  listProfessor: Professor[];\r\n  currentFilterVs: FilterVs;\r\n}\r\nexport interface DispatchProps {\r\n  handleChangeFilterVs: (filterVs: FilterVs) => void;\r\n}\r\n\r\ntype FilterProps = OwnProps & StateProps & DispatchProps;\r\n\r\nconst Filter: React.SFC<FilterProps> = ({\r\n  listCities,\r\n  listGroups,\r\n  listProfessor,\r\n  currentFilterVs,\r\n  handleChangeFilterVs\r\n}) => {\r\n  const [filter, setFilter] = useState<FilterType>(\"All\");\r\n  const [filterOption, setFilterOption] = useState<FilterOption>(0);\r\n\r\n  const [filterOptionArray, setFilterOptionArray] = useState<any[]>([]);\r\n\r\n  useEffect(() => {\r\n    setFilter(currentFilterVs.type);\r\n    setFilterOption(currentFilterVs.option);\r\n    if (currentFilterVs.option === defaultFilterVs.option)\r\n      setFilterOptionArray([]);\r\n  }, [currentFilterVs]);\r\n\r\n  const handleChangeFilter = (filter: FilterType) => {\r\n    setFilter(filter);\r\n    switch (filter) {\r\n      case \"City\":\r\n        setFilterOption(listCities[0].id);\r\n        setFilterOptionArray(listCities);\r\n        break;\r\n      case \"Group\":\r\n        setFilterOption(listGroups[0].id);\r\n        setFilterOptionArray(listGroups);\r\n        break;\r\n      case \"Professor\":\r\n        setFilterOption(listProfessor[0].id);\r\n        setFilterOptionArray(listProfessor);\r\n        break;\r\n      case \"All\":\r\n        setFilterOptionArray([]);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleShowChangeFilter = () => {\r\n    return (\r\n      <FormControl\r\n        as=\"select\"\r\n        value={filter}\r\n        onChange={(e: any) => {\r\n          handleChangeFilter(e.target.value);\r\n        }}\r\n      >\r\n        {filterTypeArray.map((option, id) => (\r\n          <option key={id}>{option}</option>\r\n        ))}\r\n      </FormControl>\r\n    );\r\n  };\r\n\r\n  const handleShowChangeFilterOption = () => {\r\n    return (\r\n      <FormControl\r\n        as=\"select\"\r\n        value={filterOption}\r\n        onChange={(e: any) => {\r\n          setFilterOption(Number(e.target.value));\r\n        }}\r\n      >\r\n        {filterOptionArray.map((option, id) => (\r\n          <option key={id} value={option.id}>\r\n            {option.name}\r\n          </option>\r\n        ))}\r\n      </FormControl>\r\n    );\r\n  };\r\n\r\n  const handleShowFilterButton = () => {\r\n    return (\r\n      <Container style={styles.applyFilterButtonContainerStyle}>\r\n        <Button\r\n          style={styles.filterButtonStyle}\r\n          onClick={() => {\r\n            handleChangeFilterVs({ type: filter, option: filterOption });\r\n          }}\r\n        >\r\n          Filter\r\n        </Button>\r\n      </Container>\r\n    );\r\n  };\r\n  const handleShowResetFilterButton = () => {\r\n    return (\r\n      <Container style={styles.resetFilterButtonContainerStyle}>\r\n        <Button\r\n          style={styles.filterButtonStyle}\r\n          onClick={() => {\r\n            handleChangeFilterVs(defaultFilterVs);\r\n          }}\r\n        >\r\n          Show All\r\n        </Button>\r\n      </Container>\r\n    );\r\n  };\r\n  return (\r\n    <Row style={styles.filterBodyStyle}>\r\n      <Col sm={3}>{handleShowChangeFilter()}</Col>\r\n      <Col sm={3}>{handleShowChangeFilterOption()}</Col>\r\n      <Col>{handleShowFilterButton()}</Col>\r\n      <Col>{handleShowResetFilterButton()}</Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nconst MapStateToProps: ReactRedux.MapStateToProps<\r\n  StateProps,\r\n  OwnProps,\r\n  RootReducerState\r\n> = (state, ownProps) => {\r\n  return {\r\n    listProfessor: state.professors,\r\n    listCities: state.cities,\r\n    listGroups: state.groups,\r\n    currentFilterVs: state.currentFilterVs\r\n  };\r\n};\r\n\r\nconst MapDispatchToProps: ReactRedux.MapDispatchToProps<\r\n  DispatchProps,\r\n  OwnProps\r\n> = {\r\n  handleChangeFilterVs: Actions.ChangeFilterVsAction\r\n};\r\n\r\nexport default ReactRedux.connect(MapStateToProps, MapDispatchToProps)(Filter);\r\n","import React, { useEffect, Fragment } from \"react\";\r\nimport { Student, Group, City, Professor } from \"../utils/dataTypes\";\r\nimport * as ReactRedux from \"react-redux\";\r\nimport { RootReducerState } from \"../reducers/rootReducer\";\r\nimport { Actions } from \"../reducers/actions\";\r\nimport { Table, Button } from \"react-bootstrap\";\r\nimport { IdToName, StudentToProfessorName } from \"../utils/utilsFunctions\";\r\nimport * as styles from \"../components/stylesComponent\";\r\nimport _ from \"lodash\";\r\nimport Filter from \"./filter\";\r\nconst fields: string[] = [\r\n  \"#\",\r\n  \"Name\",\r\n  \"Group\",\r\n  \"Email\",\r\n  \"Sex\",\r\n  \"Age\",\r\n  \"Birthplace\",\r\n  \"Birthday\",\r\n  \"Main professor\",\r\n  \"Delete\"\r\n];\r\n\r\nexport interface OwnProps {}\r\nexport interface StateProps {\r\n  listStudents: Student[];\r\n  listGroups: Group[];\r\n  listCities: City[];\r\n  listProfessors: Professor[];\r\n}\r\nexport interface DispatchProps {\r\n  handleDeleteStudent: (student: Student) => void;\r\n  handleLoadStudents: () => void;\r\n  handleLoadGroup: () => void;\r\n}\r\ntype ListStudentsProps = OwnProps & StateProps & DispatchProps;\r\n\r\nconst ListStudents: React.SFC<ListStudentsProps> = ({\r\n  listStudents,\r\n  listGroups,\r\n  listCities,\r\n  listProfessors,\r\n  handleDeleteStudent,\r\n  handleLoadStudents,\r\n  handleLoadGroup\r\n}) => {\r\n  useEffect(() => {\r\n    handleLoadStudents();\r\n    handleLoadGroup();\r\n  }, []);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Filter />\r\n      <Table striped bordered hover style={styles.listTableBodyStyle}>\r\n        <thead>\r\n          <tr>\r\n            {fields.map((field, id) => (\r\n              <th key={id}>{field}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {listStudents.map(student => (\r\n            <tr key={student.id}>\r\n              <td>{student.id}</td>\r\n              <td>{student.name}</td>\r\n              <td>{IdToName(student.groupId, listGroups)}</td>\r\n              <td>{student.email}</td>\r\n              <td>{student.sex}</td>\r\n              <td>{student.age}</td>\r\n              <td>{IdToName(student.cityId, listCities)}</td>\r\n              <td>{student.birthday}</td>\r\n              <td>\r\n                {StudentToProfessorName(student, listGroups, listProfessors)}\r\n              </td>\r\n              <td>\r\n                <Button\r\n                  style={styles.listDeleteButtonStyle}\r\n                  onClick={() => {\r\n                    handleDeleteStudent(student);\r\n                  }}\r\n                >\r\n                  Delete\r\n                </Button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\n//////////////////////////////////////Container///////////////////////////\r\n\r\nconst MapStateToProps: ReactRedux.MapStateToProps<\r\n  StateProps,\r\n  OwnProps,\r\n  RootReducerState\r\n> = (state, ownProps) => {\r\n  var listStudents: Student[];\r\n\r\n  switch (state.currentFilterVs.type) {\r\n    case \"City\":\r\n      listStudents = _.filter(\r\n        state.students,\r\n        student => student.cityId === state.currentFilterVs.option\r\n      );\r\n      break;\r\n    case \"Group\":\r\n      listStudents = _.filter(\r\n        state.students,\r\n        student => student.groupId === state.currentFilterVs.option\r\n      );\r\n      break;\r\n    case \"Professor\":\r\n      var group: Group | undefined = _.find(\r\n        state.groups,\r\n        group => group.professorId === state.currentFilterVs.option\r\n      );\r\n\r\n      listStudents =\r\n        typeof group === undefined\r\n          ? state.students\r\n          : _.filter(state.students, student => student.groupId === group?.id);\r\n      break;\r\n    case \"All\":\r\n    default:\r\n      listStudents = state.students;\r\n      break;\r\n  }\r\n\r\n  return {\r\n    listStudents: listStudents,\r\n    listCities: state.cities,\r\n    listGroups: state.groups,\r\n    listProfessors: state.professors\r\n  };\r\n};\r\n\r\nconst MapDispatchToProps: ReactRedux.MapDispatchToProps<\r\n  DispatchProps,\r\n  OwnProps\r\n> = {\r\n  handleDeleteStudent: Actions.DeleteStudentThunk,\r\n  handleLoadGroup: Actions.FetchGroupsThunk,\r\n  handleLoadStudents: Actions.FetchStudentsThunk\r\n};\r\n\r\nexport default ReactRedux.connect(\r\n  MapStateToProps,\r\n  MapDispatchToProps\r\n)(ListStudents);\r\n","import React, { useEffect } from \"react\";\r\nimport { Group, Professor } from \"../utils/dataTypes\";\r\nimport * as ReactRedux from \"react-redux\";\r\nimport { RootReducerState } from \"../reducers/rootReducer\";\r\nimport { Actions } from \"../reducers/actions\";\r\nimport { Table, Button } from \"react-bootstrap\";\r\nimport { IdToName } from \"../utils/utilsFunctions\";\r\nimport * as styles from \"../components/stylesComponent\";\r\nconst fields: string[] = [\"#\", \"Name\", \"Main professor\", \"Delete\"];\r\n\r\nexport interface OwnProps {}\r\nexport interface StateProps {\r\n  listGroups: Group[];\r\n  listProfessors: Professor[];\r\n}\r\nexport interface DispatchProps {\r\n  handleDeleteGroup: (group: Group) => void;\r\n  handleLoadProfessor: () => void;\r\n  handleLoadGroup: () => void;\r\n}\r\ntype ListGroupsProps = OwnProps & StateProps & DispatchProps;\r\n\r\nconst ListGroups: React.SFC<ListGroupsProps> = ({\r\n  listGroups,\r\n  listProfessors,\r\n  handleDeleteGroup,\r\n  handleLoadGroup,\r\n  handleLoadProfessor\r\n}) => {\r\n  useEffect(() => {\r\n    handleLoadProfessor();\r\n    handleLoadGroup();\r\n  }, []);\r\n\r\n  return (\r\n    <Table striped bordered hover style={styles.listTableBodyStyle}>\r\n      <thead>\r\n        <tr>\r\n          {fields.map((field, id) => (\r\n            <th key={id}>{field}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {listGroups.map(group => (\r\n          <tr key={group.id}>\r\n            <td>{group.id}</td>\r\n            <td>{group.name}</td>\r\n            <td>{IdToName(group.professorId, listProfessors)}</td>\r\n            <td>\r\n              <Button\r\n                style={styles.listDeleteButtonStyle}\r\n                onClick={() => {\r\n                  handleDeleteGroup(group);\r\n                }}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\n//////////////////////////////////////Container///////////////////////////\r\n\r\nconst MapStateToProps: ReactRedux.MapStateToProps<\r\n  StateProps,\r\n  OwnProps,\r\n  RootReducerState\r\n> = (state, ownProps) => {\r\n  return {\r\n    listGroups: state.groups,\r\n    listProfessors: state.professors\r\n  };\r\n};\r\n\r\nconst MapDispatchToProps: ReactRedux.MapDispatchToProps<\r\n  DispatchProps,\r\n  OwnProps\r\n> = {\r\n  handleLoadProfessor: Actions.FetchProfessorsThunk,\r\n  handleLoadGroup: Actions.FetchGroupsThunk,\r\n  handleDeleteGroup: Actions.DeleteGroupThunk\r\n};\r\n\r\nexport default ReactRedux.connect(\r\n  MapStateToProps,\r\n  MapDispatchToProps\r\n)(ListGroups);\r\n","import React, { Fragment } from \"react\";\r\nimport * as styles from \"../components/stylesComponent\";\r\nimport ListStudent from \"./listStudents\";\r\nimport ListGroup from \"./listGroups\";\r\nimport { Route, Switch, NavLink, Redirect } from \"react-router-dom\";\r\nimport {\r\n  groupListRoute,\r\n  studentListRoute,\r\n  registerListRoute\r\n} from \"../utils/definitions\";\r\nimport { Nav } from \"react-bootstrap\";\r\n\r\nexport interface RegisterProps {}\r\n\r\nconst Register: React.SFC<RegisterProps> = () => {\r\n  const handleIsActive = (location: any, path: string): boolean => {\r\n    return location.pathname === path ? true : false;\r\n  };\r\n\r\n  const handleRegisterLink = (path: string, text: string) => {\r\n    return (\r\n      <NavLink\r\n        to={path}\r\n        style={styles.navBar2LinkDesactiveStyle}\r\n        activeStyle={styles.navBar2LinkActiveStyle}\r\n        isActive={(match, location) => handleIsActive(location, path)}\r\n      >\r\n        {text}\r\n      </NavLink>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Nav variant=\"pills\" style={styles.navBar2BodyStyle}>\r\n        <Nav.Item>\r\n          {handleRegisterLink(registerListRoute + studentListRoute, \"Student\")}\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          {handleRegisterLink(registerListRoute + groupListRoute, \"Group\")}\r\n        </Nav.Item>\r\n      </Nav>\r\n\r\n      <Switch>\r\n        <Route path={registerListRoute + studentListRoute}>\r\n          <ListStudent />\r\n        </Route>\r\n        <Route path={registerListRoute + groupListRoute}>\r\n          <ListGroup />\r\n        </Route>\r\n        <Redirect to={registerListRoute + studentListRoute} />\r\n      </Switch>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { homeRoute } from \"../utils/definitions\";\r\nimport * as ReactRedux from \"react-redux\";\r\nimport { RootReducerState } from \"../reducers/rootReducer\";\r\nexport interface OwnProps {\r\n  component: any;\r\n  path: string;\r\n}\r\nexport interface StateProps {\r\n  error: boolean;\r\n}\r\nexport interface DispatchProps {}\r\n\r\ntype RouteConnectedProps = OwnProps & StateProps & DispatchProps;\r\nconst RouteConnected: React.SFC<RouteConnectedProps> = ({\r\n  component: Component,\r\n  path,\r\n  error\r\n}) => {\r\n  return error ? (\r\n    <Redirect to={homeRoute} />\r\n  ) : (\r\n    <Route path={path} component={Component} />\r\n  );\r\n};\r\n\r\nconst MapStateToProps: ReactRedux.MapStateToProps<\r\n  StateProps,\r\n  OwnProps,\r\n  RootReducerState\r\n> = (state, ownProps) => {\r\n  return {\r\n    error: state.error\r\n  };\r\n};\r\n\r\nconst MapDispatchToProps: ReactRedux.MapDispatchToProps<\r\n  DispatchProps,\r\n  OwnProps\r\n> = {};\r\n\r\nexport default ReactRedux.connect(\r\n  MapStateToProps,\r\n  MapDispatchToProps\r\n)(RouteConnected);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport * as ReactRedux from \"react-redux\";\r\n\r\nimport { Container } from \"react-bootstrap\";\r\nimport NavBar from \"./presentational/navBar\";\r\nimport Home from \"./presentational/home\";\r\nimport Insert from \"./presentational/insert\";\r\nimport Register from \"./presentational/register\";\r\nimport RouteConnected from \"./components/routeConnected\";\r\nimport {\r\n  homeRoute,\r\n  insertFormRoute,\r\n  registerListRoute\r\n} from \"./utils/definitions\";\r\n\r\nimport { RootReducerState } from \"./reducers/rootReducer\";\r\nimport { Actions } from \"./reducers/actions\";\r\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\r\n\r\nexport interface OwnProps {}\r\nexport interface StateProps {\r\n  error: boolean;\r\n}\r\nexport interface DispatchProps {\r\n  loadCities: () => void;\r\n  loadProffesors: () => void;\r\n}\r\n\r\ntype AppConnectedProps = OwnProps & StateProps & DispatchProps;\r\n\r\nconst AppConnected: React.SFC<AppConnectedProps> = ({\r\n  loadCities,\r\n  loadProffesors,\r\n  error\r\n}) => {\r\n  const [time, setTime] = useState<NodeJS.Timeout>(setTimeout(() => {}, 1));\r\n  const handleLoad = () => {\r\n    loadCities();\r\n    loadProffesors();\r\n  };\r\n\r\n  const stopTimer = () => {\r\n    clearInterval(time);\r\n  };\r\n  const startTimer = () => {\r\n    setTime(\r\n      setInterval(() => {\r\n        handleLoad();\r\n      }, 5000)\r\n    );\r\n  };\r\n\r\n  const handleCheckError = () => {\r\n    if (error) {\r\n      startTimer();\r\n    } else {\r\n      stopTimer();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleCheckError();\r\n  }, [error]);\r\n\r\n  return (\r\n    <Container>\r\n      <BrowserRouter>\r\n        <NavBar />\r\n        <Switch>\r\n          <Route exact path={homeRoute} component={Home} />\r\n          <RouteConnected path={insertFormRoute} component={Insert} />\r\n          <RouteConnected path={registerListRoute} component={Register} />\r\n          <Redirect to={homeRoute} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst MapStateToProps: ReactRedux.MapStateToProps<\r\n  StateProps,\r\n  OwnProps,\r\n  RootReducerState\r\n> = (state, ownProps) => {\r\n  return {\r\n    error: state.error\r\n  };\r\n};\r\n\r\nconst MapDispatchToProps: ReactRedux.MapDispatchToProps<\r\n  DispatchProps,\r\n  OwnProps\r\n> = {\r\n  loadCities: Actions.FetchCitiesThunk,\r\n  loadProffesors: Actions.FetchProfessorsThunk\r\n};\r\n\r\nexport default ReactRedux.connect(\r\n  MapStateToProps,\r\n  MapDispatchToProps\r\n)(AppConnected);\r\n","import {\r\n  Group,\r\n  Professor,\r\n  City,\r\n  Student,\r\n  FilterVs,\r\n  defaultFilterVs\r\n} from \"../utils/dataTypes\";\r\nimport _ from \"lodash\";\r\nimport { Reducer } from \"redux\";\r\nimport { ReduxAction } from \"./actions\";\r\n\r\nexport interface RootReducerState {\r\n  students: Student[];\r\n  professors: Professor[];\r\n  groups: Group[];\r\n  cities: City[];\r\n\r\n  fetching: boolean;\r\n  error: boolean;\r\n  currentFilterVs: FilterVs;\r\n}\r\n\r\nconst initialState: RootReducerState = {\r\n  cities: [],\r\n  students: [],\r\n  groups: [],\r\n  professors: [],\r\n  error: true,\r\n  fetching: false,\r\n  currentFilterVs: defaultFilterVs\r\n};\r\nexport const RootReducer: Reducer<RootReducerState, ReduxAction> = (\r\n  state = initialState,\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case \"FETCHING\":\r\n      return { ...state, fetching: true };\r\n    case \"FETCH_ERROR\":\r\n      return { ...state, fetching: false, error: true };\r\n    case \"FETCH_STUDENTS_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        error: false,\r\n        fetching: false,\r\n        isStudentsUpdated: true,\r\n        students: action.payload\r\n      };\r\n    case \"FETCH_GROUPS_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        error: false,\r\n        fetching: false,\r\n        isGroupsUpdated: true,\r\n        groups: action.payload\r\n      };\r\n    case \"FETCH_CITIES_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        error: false,\r\n        fetching: false,\r\n        cities: action.payload\r\n      };\r\n    case \"FETCH_PROFESSORS_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        error: false,\r\n        fetching: false,\r\n        professors: action.payload\r\n      };\r\n    case \"POST_STUDENT_SUCCESS\":\r\n      return { ...state, students: [...state.students, action.payload] };\r\n    case \"DELETE_STUDENT_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        students: _.filter(\r\n          state.students,\r\n          student => student.id !== action.payload.id\r\n        )\r\n      };\r\n    case \"DELETE_GROUP_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        groups: _.filter(state.groups, group => group.id !== action.payload.id)\r\n      };\r\n    case \"POST_GROUP_SUCCESS\":\r\n      return { ...state, isGroupsUpdated: false };\r\n    case \"CHANGE_FILTER\":\r\n      return { ...state, currentFilterVs: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// export interface RootReducerState {\r\n//   students: StudentState;\r\n//   groups: GroupState;\r\n//   cities: CitiesState;\r\n//   professors: ProfessorsState;\r\n// }\r\n\r\n// export const Actions = {\r\n//   ...StudentActions,\r\n//   ...GroupActions,\r\n//   ...ProfessorActions,\r\n//   ...CitiesActions\r\n// };\r\n\r\n// export const RootReducer = combineReducers<RootReducerState>({\r\n//   students: StudentReducer,\r\n//   groups: GroupReducer,\r\n//   cities: CitiesReducer,\r\n//   professors: ProfessorsReducer\r\n// });\r\n","import React from \"react\";\nimport AppConnected from \"./AppConnected\";\n\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport { RootReducer } from \"./reducers/rootReducer\";\nimport { createStore, applyMiddleware } from \"redux\";\n\nconst store = createStore(RootReducer, applyMiddleware(thunk));\n\nexport interface AppProps {}\nconst App: React.SFC<AppProps> = () => {\n  return (\n    <Provider store={store}>\n      <AppConnected />\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}